{"version":3,"file":"./build/rich-text/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window \"lodash\"","webpack://wp/./packages/rich-text/build-module/store/@wordpress/rich-text/src/store/reducer.js","webpack://wp/./node_modules/rememo/es/rememo.js","webpack://wp/./packages/rich-text/build-module/store/@wordpress/rich-text/src/store/selectors.js","webpack://wp/./packages/rich-text/build-module/store/@wordpress/rich-text/src/store/actions.js","webpack://wp/./packages/rich-text/build-module/store/@wordpress/rich-text/src/store/index.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/is-format-equal.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/normalise-formats.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/apply-format.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/create-element.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/special-characters.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/create.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/concat.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/get-active-formats.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/get-active-format.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/get-active-object.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/get-text-content.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/is-collapsed.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/is-empty.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/join.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/register-format-type.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/remove-format.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/insert.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/remove.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/replace.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/insert-line-separator.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/insert-object.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/slice.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/split.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/to-tree.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/get-format-type.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/to-dom.js","webpack://wp/external window [\"wp\",\"escapeHtml\"]","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/to-html-string.js","webpack://wp/external window [\"wp\",\"a11y\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/toggle-format.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/unregister-format-type.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-anchor-ref.js","webpack://wp/external window [\"wp\",\"compose\"]","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-boundary-style.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-copy-handler.js","webpack://wp/external window [\"wp\",\"keycodes\"]","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-format-boundaries.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-input-and-selection.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/update-formats.js","webpack://wp/./packages/rich-text/build-module/@wordpress/rich-text/src/remove-line-separator.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-delete.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/index.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-default-style.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/use-select-object.js","webpack://wp/./packages/rich-text/build-module/component/@wordpress/rich-text/src/component/format-edit.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","/**\n * External dependencies\n */\nimport { omit } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Reducer managing the format types\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function formatTypes( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ADD_FORMAT_TYPES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t// Key format types by their name.\n\t\t\t\t...action.formatTypes.reduce(\n\t\t\t\t\t( newFormatTypes, type ) => ( {\n\t\t\t\t\t\t...newFormatTypes,\n\t\t\t\t\t\t[ type.name ]: type,\n\t\t\t\t\t} ),\n\t\t\t\t\t{}\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'REMOVE_FORMAT_TYPES':\n\t\t\treturn omit( state, action.names );\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( { formatTypes } );\n","'use strict';\n\n/** @typedef {(...args: any[]) => *[]} GetDependants */\n\n/** @typedef {() => void} Clear */\n\n/**\n * @typedef {{\n *   getDependants: GetDependants,\n *   clear: Clear\n * }} EnhancedSelector\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef CacheNode\n *\n * @property {?CacheNode|undefined} [prev] Previous node.\n * @property {?CacheNode|undefined} [next] Next node.\n * @property {*[]} args Function arguments for cache entry.\n * @property {*} val Function result.\n */\n\n/**\n * @typedef Cache\n *\n * @property {Clear} clear Function to clear cache.\n * @property {boolean} [isUniqueByDependants] Whether dependants are valid in\n * considering cache uniqueness. A cache is unique if dependents are all arrays\n * or objects.\n * @property {CacheNode?} [head] Cache head.\n * @property {*[]} [lastDependants] Dependants from previous invocation.\n */\n\n/**\n * Arbitrary value used as key for referencing cache object in WeakMap tree.\n *\n * @type {{}}\n */\nvar LEAF_KEY = {};\n\n/**\n * Returns the first argument as the sole entry in an array.\n *\n * @template T\n *\n * @param {T} value Value to return.\n *\n * @return {[T]} Value returned as entry in array.\n */\nfunction arrayOf(value) {\n\treturn [value];\n}\n\n/**\n * Returns true if the value passed is object-like, or false otherwise. A value\n * is object-like if it can support property assignment, e.g. object or array.\n *\n * @param {*} value Value to test.\n *\n * @return {boolean} Whether value is object-like.\n */\nfunction isObjectLike(value) {\n\treturn !!value && 'object' === typeof value;\n}\n\n/**\n * Creates and returns a new cache object.\n *\n * @return {Cache} Cache object.\n */\nfunction createCache() {\n\t/** @type {Cache} */\n\tvar cache = {\n\t\tclear: function () {\n\t\t\tcache.head = null;\n\t\t},\n\t};\n\n\treturn cache;\n}\n\n/**\n * Returns true if entries within the two arrays are strictly equal by\n * reference from a starting index.\n *\n * @param {*[]} a First array.\n * @param {*[]} b Second array.\n * @param {number} fromIndex Index from which to start comparison.\n *\n * @return {boolean} Whether arrays are shallowly equal.\n */\nfunction isShallowEqual(a, b, fromIndex) {\n\tvar i;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (i = fromIndex; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns a memoized selector function. The getDependants function argument is\n * called before the memoized selector and is expected to return an immutable\n * reference or array of references on which the selector depends for computing\n * its own return value. The memoize cache is preserved only as long as those\n * dependant references remain the same. If getDependants returns a different\n * reference(s), the cache is cleared and the selector value regenerated.\n *\n * @template {(...args: *[]) => *} S\n *\n * @param {S} selector Selector function.\n * @param {GetDependants=} getDependants Dependant getter returning an array of\n * references used in cache bust consideration.\n */\nexport default function (selector, getDependants) {\n\t/** @type {WeakMap<*,*>} */\n\tvar rootCache;\n\n\t/** @type {GetDependants} */\n\tvar normalizedGetDependants = getDependants ? getDependants : arrayOf;\n\n\t/**\n\t * Returns the cache for a given dependants array. When possible, a WeakMap\n\t * will be used to create a unique cache for each set of dependants. This\n\t * is feasible due to the nature of WeakMap in allowing garbage collection\n\t * to occur on entries where the key object is no longer referenced. Since\n\t * WeakMap requires the key to be an object, this is only possible when the\n\t * dependant is object-like. The root cache is created as a hierarchy where\n\t * each top-level key is the first entry in a dependants set, the value a\n\t * WeakMap where each key is the next dependant, and so on. This continues\n\t * so long as the dependants are object-like. If no dependants are object-\n\t * like, then the cache is shared across all invocations.\n\t *\n\t * @see isObjectLike\n\t *\n\t * @param {*[]} dependants Selector dependants.\n\t *\n\t * @return {Cache} Cache object.\n\t */\n\tfunction getCache(dependants) {\n\t\tvar caches = rootCache,\n\t\t\tisUniqueByDependants = true,\n\t\t\ti,\n\t\t\tdependant,\n\t\t\tmap,\n\t\t\tcache;\n\n\t\tfor (i = 0; i < dependants.length; i++) {\n\t\t\tdependant = dependants[i];\n\n\t\t\t// Can only compose WeakMap from object-like key.\n\t\t\tif (!isObjectLike(dependant)) {\n\t\t\t\tisUniqueByDependants = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Does current segment of cache already have a WeakMap?\n\t\t\tif (caches.has(dependant)) {\n\t\t\t\t// Traverse into nested WeakMap.\n\t\t\t\tcaches = caches.get(dependant);\n\t\t\t} else {\n\t\t\t\t// Create, set, and traverse into a new one.\n\t\t\t\tmap = new WeakMap();\n\t\t\t\tcaches.set(dependant, map);\n\t\t\t\tcaches = map;\n\t\t\t}\n\t\t}\n\n\t\t// We use an arbitrary (but consistent) object as key for the last item\n\t\t// in the WeakMap to serve as our running cache.\n\t\tif (!caches.has(LEAF_KEY)) {\n\t\t\tcache = createCache();\n\t\t\tcache.isUniqueByDependants = isUniqueByDependants;\n\t\t\tcaches.set(LEAF_KEY, cache);\n\t\t}\n\n\t\treturn caches.get(LEAF_KEY);\n\t}\n\n\t/**\n\t * Resets root memoization cache.\n\t */\n\tfunction clear() {\n\t\trootCache = new WeakMap();\n\t}\n\n\t/* eslint-disable jsdoc/check-param-names */\n\t/**\n\t * The augmented selector call, considering first whether dependants have\n\t * changed before passing it to underlying memoize function.\n\t *\n\t * @param {*}    source    Source object for derivation.\n\t * @param {...*} extraArgs Additional arguments to pass to selector.\n\t *\n\t * @return {*} Selector result.\n\t */\n\t/* eslint-enable jsdoc/check-param-names */\n\tfunction callSelector(/* source, ...extraArgs */) {\n\t\tvar len = arguments.length,\n\t\t\tcache,\n\t\t\tnode,\n\t\t\ti,\n\t\t\targs,\n\t\t\tdependants;\n\n\t\t// Create copy of arguments (avoid leaking deoptimization).\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tdependants = normalizedGetDependants.apply(null, args);\n\t\tcache = getCache(dependants);\n\n\t\t// If not guaranteed uniqueness by dependants (primitive type), shallow\n\t\t// compare against last dependants and, if references have changed,\n\t\t// destroy cache to recalculate result.\n\t\tif (!cache.isUniqueByDependants) {\n\t\t\tif (\n\t\t\t\tcache.lastDependants &&\n\t\t\t\t!isShallowEqual(dependants, cache.lastDependants, 0)\n\t\t\t) {\n\t\t\t\tcache.clear();\n\t\t\t}\n\n\t\t\tcache.lastDependants = dependants;\n\t\t}\n\n\t\tnode = cache.head;\n\t\twhile (node) {\n\t\t\t// Check whether node arguments match arguments\n\t\t\tif (!isShallowEqual(node.args, args, 1)) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== cache.head) {\n\t\t\t\t// Adjust siblings to point to each other.\n\t\t\t\t/** @type {CacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = cache.head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {CacheNode} */ (cache.head).prev = node;\n\t\t\t\tcache.head = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\tnode = /** @type {CacheNode} */ ({\n\t\t\t// Generate the result from original function\n\t\t\tval: selector.apply(null, args),\n\t\t});\n\n\t\t// Avoid including the source object in the cache.\n\t\targs[0] = null;\n\t\tnode.args = args;\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (cache.head) {\n\t\t\tcache.head.prev = node;\n\t\t\tnode.next = cache.head;\n\t\t}\n\n\t\tcache.head = node;\n\n\t\treturn node.val;\n\t}\n\n\tcallSelector.getDependants = normalizedGetDependants;\n\tcallSelector.clear = clear;\n\tclear();\n\n\treturn /** @type {S & EnhancedSelector} */ (callSelector);\n}\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { find } from 'lodash';\n\n/**\n * Returns all the available format types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Format types.\n */\nexport const getFormatTypes = createSelector(\n\t( state ) => Object.values( state.formatTypes ),\n\t( state ) => [ state.formatTypes ]\n);\n\n/**\n * Returns a format type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Format type name.\n *\n * @return {Object?} Format type.\n */\nexport function getFormatType( state, name ) {\n\treturn state.formatTypes[ name ];\n}\n\n/**\n * Gets the format type, if any, that can handle a bare element (without a\n * data-format-type attribute), given the tag name of this element.\n *\n * @param {Object} state              Data state.\n * @param {string} bareElementTagName The tag name of the element to find a\n *                                    format type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForBareElement( state, bareElementTagName ) {\n\treturn find( getFormatTypes( state ), ( { className, tagName } ) => {\n\t\treturn className === null && bareElementTagName === tagName;\n\t} );\n}\n\n/**\n * Gets the format type, if any, that can handle an element, given its classes.\n *\n * @param {Object} state            Data state.\n * @param {string} elementClassName The classes of the element to find a format\n *                                  type for.\n * @return {?Object} Format type.\n */\nexport function getFormatTypeForClassName( state, elementClassName ) {\n\treturn find( getFormatTypes( state ), ( { className } ) => {\n\t\tif ( className === null ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ` ${ elementClassName } `.indexOf( ` ${ className } ` ) >= 0;\n\t} );\n}\n","/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * Returns an action object used in signalling that format types have been\n * added.\n *\n * @param {Array|Object} formatTypes Format types received.\n *\n * @return {Object} Action object.\n */\nexport function addFormatTypes( formatTypes ) {\n\treturn {\n\t\ttype: 'ADD_FORMAT_TYPES',\n\t\tformatTypes: castArray( formatTypes ),\n\t};\n}\n\n/**\n * Returns an action object used to remove a registered format type.\n *\n * @param {string|Array} names Format name.\n *\n * @return {Object} Action object.\n */\nexport function removeFormatTypes( names ) {\n\treturn {\n\t\ttype: 'REMOVE_FORMAT_TYPES',\n\t\tnames: castArray( names ),\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\n\nconst STORE_NAME = 'core/rich-text';\n\n/**\n * Store definition for the rich-text namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tselectors,\n\tactions,\n} );\n\nregister( store );\n","/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Optimised equality check for format objects.\n *\n * @param {?RichTextFormat} format1 Format to compare.\n * @param {?RichTextFormat} format2 Format to compare.\n *\n * @return {boolean} True if formats are equal, false if not.\n */\nexport function isFormatEqual( format1, format2 ) {\n\t// Both not defined.\n\tif ( format1 === format2 ) {\n\t\treturn true;\n\t}\n\n\t// Either not defined.\n\tif ( ! format1 || ! format2 ) {\n\t\treturn false;\n\t}\n\n\tif ( format1.type !== format2.type ) {\n\t\treturn false;\n\t}\n\n\tconst attributes1 = format1.attributes;\n\tconst attributes2 = format2.attributes;\n\n\t// Both not defined.\n\tif ( attributes1 === attributes2 ) {\n\t\treturn true;\n\t}\n\n\t// Either not defined.\n\tif ( ! attributes1 || ! attributes2 ) {\n\t\treturn false;\n\t}\n\n\tconst keys1 = Object.keys( attributes1 );\n\tconst keys2 = Object.keys( attributes2 );\n\n\tif ( keys1.length !== keys2.length ) {\n\t\treturn false;\n\t}\n\n\tconst length = keys1.length;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst name = keys1[ i ];\n\n\t\tif ( attributes1[ name ] !== attributes2[ name ] ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Normalises formats: ensures subsequent adjacent equal formats have the same\n * reference.\n *\n * @param {RichTextValue} value Value to normalise formats of.\n *\n * @return {RichTextValue} New value with normalised formats.\n */\nexport function normaliseFormats( value ) {\n\tconst newFormats = value.formats.slice();\n\n\tnewFormats.forEach( ( formatsAtIndex, index ) => {\n\t\tconst formatsAtPreviousIndex = newFormats[ index - 1 ];\n\n\t\tif ( formatsAtPreviousIndex ) {\n\t\t\tconst newFormatsAtIndex = formatsAtIndex.slice();\n\n\t\t\tnewFormatsAtIndex.forEach( ( format, formatIndex ) => {\n\t\t\t\tconst previousFormat = formatsAtPreviousIndex[ formatIndex ];\n\n\t\t\t\tif ( isFormatEqual( format, previousFormat ) ) {\n\t\t\t\t\tnewFormatsAtIndex[ formatIndex ] = previousFormat;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tnewFormats[ index ] = newFormatsAtIndex;\n\t\t}\n\t} );\n\n\treturn {\n\t\t...value,\n\t\tformats: newFormats,\n\t};\n}\n","/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\nfunction replace( array, index, value ) {\n\tarray = array.slice();\n\tarray[ index ] = value;\n\treturn array;\n}\n\n/**\n * Apply a format object to a Rich Text value from the given `startIndex` to the\n * given `endIndex`. Indices are retrieved from the selection if none are\n * provided.\n *\n * @param {RichTextValue}  value        Value to modify.\n * @param {RichTextFormat} format       Format to apply.\n * @param {number}         [startIndex] Start index.\n * @param {number}         [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the format applied.\n */\nexport function applyFormat(\n\tvalue,\n\tformat,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, activeFormats } = value;\n\tconst newFormats = formats.slice();\n\n\t// The selection is collapsed.\n\tif ( startIndex === endIndex ) {\n\t\tconst startFormat = newFormats[ startIndex ]?.find(\n\t\t\t( { type } ) => type === format.type\n\t\t);\n\n\t\t// If the caret is at a format of the same type, expand start and end to\n\t\t// the edges of the format. This is useful to apply new attributes.\n\t\tif ( startFormat ) {\n\t\t\tconst index = newFormats[ startIndex ].indexOf( startFormat );\n\n\t\t\twhile (\n\t\t\t\tnewFormats[ startIndex ] &&\n\t\t\t\tnewFormats[ startIndex ][ index ] === startFormat\n\t\t\t) {\n\t\t\t\tnewFormats[ startIndex ] = replace(\n\t\t\t\t\tnewFormats[ startIndex ],\n\t\t\t\t\tindex,\n\t\t\t\t\tformat\n\t\t\t\t);\n\t\t\t\tstartIndex--;\n\t\t\t}\n\n\t\t\tendIndex++;\n\n\t\t\twhile (\n\t\t\t\tnewFormats[ endIndex ] &&\n\t\t\t\tnewFormats[ endIndex ][ index ] === startFormat\n\t\t\t) {\n\t\t\t\tnewFormats[ endIndex ] = replace(\n\t\t\t\t\tnewFormats[ endIndex ],\n\t\t\t\t\tindex,\n\t\t\t\t\tformat\n\t\t\t\t);\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Determine the highest position the new format can be inserted at.\n\t\tlet position = +Infinity;\n\n\t\tfor ( let index = startIndex; index < endIndex; index++ ) {\n\t\t\tif ( newFormats[ index ] ) {\n\t\t\t\tnewFormats[ index ] = newFormats[ index ].filter(\n\t\t\t\t\t( { type } ) => type !== format.type\n\t\t\t\t);\n\n\t\t\t\tconst length = newFormats[ index ].length;\n\n\t\t\t\tif ( length < position ) {\n\t\t\t\t\tposition = length;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnewFormats[ index ] = [];\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t}\n\n\t\tfor ( let index = startIndex; index < endIndex; index++ ) {\n\t\t\tnewFormats[ index ].splice( position, 0, format );\n\t\t}\n\t}\n\n\treturn normaliseFormats( {\n\t\t...value,\n\t\tformats: newFormats,\n\t\t// Always revise active formats. This serves as a placeholder for new\n\t\t// inputs with the format so new input appears with the format applied,\n\t\t// and ensures a format of the same type uses the latest values.\n\t\tactiveFormats: [\n\t\t\t...( activeFormats?.filter(\n\t\t\t\t( { type } ) => type !== format.type\n\t\t\t) || [] ),\n\t\t\tformat,\n\t\t],\n\t} );\n}\n","/**\n * Parse the given HTML into a body element.\n *\n * Note: The current implementation will return a shared reference, reset on\n * each call to `createElement`. Therefore, you should not hold a reference to\n * the value to operate upon asynchronously, as it may have unexpected results.\n *\n * @param {HTMLDocument} document The HTML document to use to parse.\n * @param {string}       html     The HTML to parse.\n *\n * @return {HTMLBodyElement} Body element with parsed HTML.\n */\nexport function createElement( { implementation }, html ) {\n\t// Because `createHTMLDocument` is an expensive operation, and with this\n\t// function being internal to `rich-text` (full control in avoiding a risk\n\t// of asynchronous operations on the shared reference), a single document\n\t// is reused and reset for each call to the function.\n\tif ( ! createElement.body ) {\n\t\tcreateElement.body = implementation.createHTMLDocument( '' ).body;\n\t}\n\n\tcreateElement.body.innerHTML = html;\n\n\treturn createElement.body;\n}\n","/**\n * Line separator character, used for multiline text.\n */\nexport const LINE_SEPARATOR = '\\u2028';\n\n/**\n * Object replacement character, used as a placeholder for objects.\n */\nexport const OBJECT_REPLACEMENT_CHARACTER = '\\ufffc';\n\n/**\n * Zero width non-breaking space, used as padding in the editable DOM tree when\n * it is empty otherwise.\n */\nexport const ZWNBSP = '\\ufeff';\n","/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\nimport { createElement } from './create-element';\nimport { mergePair } from './concat';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\n/**\n * @typedef {Object} RichTextFormat\n *\n * @property {string} type Format type.\n */\n\n/**\n * @typedef {Array<RichTextFormat>} RichTextFormatList\n */\n\n/**\n * @typedef {Object} RichTextValue\n *\n * @property {string}                    text         Text.\n * @property {Array<RichTextFormatList>} formats      Formats.\n * @property {Array<RichTextFormat>}     replacements Replacements.\n * @property {number|undefined}          start        Selection start.\n * @property {number|undefined}          end          Selection end.\n */\n\nfunction createEmptyValue() {\n\treturn {\n\t\tformats: [],\n\t\treplacements: [],\n\t\ttext: '',\n\t};\n}\n\nfunction toFormat( { type, attributes } ) {\n\tlet formatType;\n\n\tif ( attributes && attributes.class ) {\n\t\tformatType = select( richTextStore ).getFormatTypeForClassName(\n\t\t\tattributes.class\n\t\t);\n\n\t\tif ( formatType ) {\n\t\t\t// Preserve any additional classes.\n\t\t\tattributes.class = ` ${ attributes.class } `\n\t\t\t\t.replace( ` ${ formatType.className } `, ' ' )\n\t\t\t\t.trim();\n\n\t\t\tif ( ! attributes.class ) {\n\t\t\t\tdelete attributes.class;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! formatType ) {\n\t\tformatType =\n\t\t\tselect( richTextStore ).getFormatTypeForBareElement( type );\n\t}\n\n\tif ( ! formatType ) {\n\t\treturn attributes ? { type, attributes } : { type };\n\t}\n\n\tif (\n\t\tformatType.__experimentalCreatePrepareEditableTree &&\n\t\t! formatType.__experimentalCreateOnChangeEditableValue\n\t) {\n\t\treturn null;\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn { type: formatType.name };\n\t}\n\n\tconst registeredAttributes = {};\n\tconst unregisteredAttributes = {};\n\tconst _attributes = { ...attributes };\n\n\tfor ( const key in formatType.attributes ) {\n\t\tconst name = formatType.attributes[ key ];\n\n\t\tregisteredAttributes[ key ] = _attributes[ name ];\n\n\t\tif ( formatType.__unstableFilterAttributeValue ) {\n\t\t\tregisteredAttributes[ key ] =\n\t\t\t\tformatType.__unstableFilterAttributeValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tregisteredAttributes[ key ]\n\t\t\t\t);\n\t\t}\n\n\t\t// delete the attribute and what's left is considered\n\t\t// to be unregistered.\n\t\tdelete _attributes[ name ];\n\n\t\tif ( typeof registeredAttributes[ key ] === 'undefined' ) {\n\t\t\tdelete registeredAttributes[ key ];\n\t\t}\n\t}\n\n\tfor ( const name in _attributes ) {\n\t\tunregisteredAttributes[ name ] = attributes[ name ];\n\t}\n\n\treturn {\n\t\ttype: formatType.name,\n\t\tattributes: registeredAttributes,\n\t\tunregisteredAttributes,\n\t};\n}\n\n/**\n * Create a RichText value from an `Element` tree (DOM), an HTML string or a\n * plain text string, with optionally a `Range` object to set the selection. If\n * called without any input, an empty value will be created. If\n * `multilineTag` is provided, any content of direct children whose type matches\n * `multilineTag` will be separated by two newlines. The optional functions can\n * be used to filter out content.\n *\n * A value will have the following shape, which you are strongly encouraged not\n * to modify without the use of helper functions:\n *\n * ```js\n * {\n *   text: string,\n *   formats: Array,\n *   replacements: Array,\n *   ?start: number,\n *   ?end: number,\n * }\n * ```\n *\n * As you can see, text and formatting are separated. `text` holds the text,\n * including any replacement characters for objects and lines. `formats`,\n * `objects` and `lines` are all sparse arrays of the same length as `text`. It\n * holds information about the formatting at the relevant text indices. Finally\n * `start` and `end` state which text indices are selected. They are only\n * provided if a `Range` was given.\n *\n * @param {Object}  [$1]                          Optional named arguments.\n * @param {Element} [$1.element]                  Element to create value from.\n * @param {string}  [$1.text]                     Text to create value from.\n * @param {string}  [$1.html]                     HTML to create value from.\n * @param {Range}   [$1.range]                    Range to create value from.\n * @param {string}  [$1.multilineTag]             Multiline tag if the structure is\n *                                                multiline.\n * @param {Array}   [$1.multilineWrapperTags]     Tags where lines can be found if\n *                                                nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]       Whether or not to collapse white\n *                                                space characters.\n * @param {boolean} [$1.__unstableIsEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nexport function create( {\n\telement,\n\ttext,\n\thtml,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\t__unstableIsEditableTree: isEditableTree,\n\tpreserveWhiteSpace,\n} = {} ) {\n\tif ( typeof text === 'string' && text.length > 0 ) {\n\t\treturn {\n\t\t\tformats: Array( text.length ),\n\t\t\treplacements: Array( text.length ),\n\t\t\ttext,\n\t\t};\n\t}\n\n\tif ( typeof html === 'string' && html.length > 0 ) {\n\t\t// It does not matter which document this is, we're just using it to\n\t\t// parse.\n\t\telement = createElement( document, html );\n\t}\n\n\tif ( typeof element !== 'object' ) {\n\t\treturn createEmptyValue();\n\t}\n\n\tif ( ! multilineTag ) {\n\t\treturn createFromElement( {\n\t\t\telement,\n\t\t\trange,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\treturn createFromMultilineElement( {\n\t\telement,\n\t\trange,\n\t\tmultilineTag,\n\t\tmultilineWrapperTags,\n\t\tisEditableTree,\n\t\tpreserveWhiteSpace,\n\t} );\n}\n\n/**\n * Helper to accumulate the value's selection start and end from the current\n * node and range.\n *\n * @param {Object} accumulator Object to accumulate into.\n * @param {Node}   node        Node to create value with.\n * @param {Range}  range       Range to create value with.\n * @param {Object} value       Value that is being accumulated.\n */\nfunction accumulateSelection( accumulator, node, range, value ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { parentNode } = node;\n\tconst { startContainer, startOffset, endContainer, endOffset } = range;\n\tconst currentLength = accumulator.text.length;\n\n\t// Selection can be extracted from value.\n\tif ( value.start !== undefined ) {\n\t\taccumulator.start = currentLength + value.start;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === startContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.start = currentLength + startOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset ]\n\t) {\n\t\taccumulator.start = currentLength;\n\t\t// Range indicates that the selection is after the current node.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset - 1 ]\n\t) {\n\t\taccumulator.start = currentLength + value.text.length;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === startContainer ) {\n\t\taccumulator.start = currentLength;\n\t}\n\n\t// Selection can be extracted from value.\n\tif ( value.end !== undefined ) {\n\t\taccumulator.end = currentLength + value.end;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === endContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset - 1 ]\n\t) {\n\t\taccumulator.end = currentLength + value.text.length;\n\t\t// Range indicates that the selection is before the current node.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset ]\n\t) {\n\t\taccumulator.end = currentLength;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === endContainer ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t}\n}\n\n/**\n * Adjusts the start and end offsets from a range based on a text filter.\n *\n * @param {Node}     node   Node of which the text should be filtered.\n * @param {Range}    range  The range to filter.\n * @param {Function} filter Function to use to filter the text.\n *\n * @return {Object|void} Object containing range properties.\n */\nfunction filterRange( node, range, filter ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { startContainer, endContainer } = range;\n\tlet { startOffset, endOffset } = range;\n\n\tif ( node === startContainer ) {\n\t\tstartOffset = filter( node.nodeValue.slice( 0, startOffset ) ).length;\n\t}\n\n\tif ( node === endContainer ) {\n\t\tendOffset = filter( node.nodeValue.slice( 0, endOffset ) ).length;\n\t}\n\n\treturn { startContainer, startOffset, endContainer, endOffset };\n}\n\n/**\n * Collapse any whitespace used for HTML formatting to one space character,\n * because it will also be displayed as such by the browser.\n *\n * @param {string} string\n */\nfunction collapseWhiteSpace( string ) {\n\treturn string.replace( /[\\n\\r\\t]+/g, ' ' );\n}\n\n/**\n * Removes reserved characters used by rich-text (zero width non breaking spaces added by `toTree` and object replacement characters).\n *\n * @param {string} string\n */\nexport function removeReservedCharacters( string ) {\n\t// with the global flag, note that we should create a new regex each time OR reset lastIndex state.\n\treturn string.replace(\n\t\tnew RegExp( `[${ ZWNBSP }${ OBJECT_REPLACEMENT_CHARACTER }]`, 'gu' ),\n\t\t''\n\t);\n}\n\n/**\n * Creates a Rich Text value from a DOM element and range.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {Array}   [$1.currentWrapperTags]\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element ) {\n\t\treturn accumulator;\n\t}\n\n\tif ( ! element.hasChildNodes() ) {\n\t\taccumulateSelection( accumulator, element, range, createEmptyValue() );\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.childNodes.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.childNodes[ index ];\n\t\tconst type = node.nodeName.toLowerCase();\n\n\t\tif ( node.nodeType === node.TEXT_NODE ) {\n\t\t\tlet filter = removeReservedCharacters;\n\n\t\t\tif ( ! preserveWhiteSpace ) {\n\t\t\t\tfilter = ( string ) =>\n\t\t\t\t\tremoveReservedCharacters( collapseWhiteSpace( string ) );\n\t\t\t}\n\n\t\t\tconst text = filter( node.nodeValue );\n\t\t\trange = filterRange( node, range, filter );\n\t\t\taccumulateSelection( accumulator, node, range, { text } );\n\t\t\t// Create a sparse array of the same length as `text`, in which\n\t\t\t// formats can be added.\n\t\t\taccumulator.formats.length += text.length;\n\t\t\taccumulator.replacements.length += text.length;\n\t\t\taccumulator.text += text;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( node.nodeType !== node.ELEMENT_NODE ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (\n\t\t\tisEditableTree &&\n\t\t\t// Ignore any placeholders.\n\t\t\t( node.getAttribute( 'data-rich-text-placeholder' ) ||\n\t\t\t\t// Ignore any line breaks that are not inserted by us.\n\t\t\t\t( type === 'br' &&\n\t\t\t\t\t! node.getAttribute( 'data-rich-text-line-break' ) ) )\n\t\t) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'script' ) {\n\t\t\tconst value = {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t'data-rich-text-script':\n\t\t\t\t\t\t\t\tnode.getAttribute( 'data-rich-text-script' ) ||\n\t\t\t\t\t\t\t\tencodeURIComponent( node.innerHTML ),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t};\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'br' ) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tmergePair( accumulator, create( { text: '\\n' } ) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst format = toFormat( {\n\t\t\ttype,\n\t\t\tattributes: getAttributes( { element: node } ),\n\t\t} );\n\n\t\tif (\n\t\t\tmultilineWrapperTags &&\n\t\t\tmultilineWrapperTags.indexOf( type ) !== -1\n\t\t) {\n\t\t\tconst value = createFromMultilineElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tcurrentWrapperTags: [ ...currentWrapperTags, format ],\n\t\t\t\tisEditableTree,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\tif ( ! format ) {\n\t\t\tmergePair( accumulator, value );\n\t\t} else if ( value.text.length === 0 ) {\n\t\t\tif ( format.attributes ) {\n\t\t\t\tmergePair( accumulator, {\n\t\t\t\t\tformats: [ , ],\n\t\t\t\t\treplacements: [ format ],\n\t\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\t// Indices should share a reference to the same formats array.\n\t\t\t// Only create a new reference if `formats` changes.\n\t\t\tfunction mergeFormats( formats ) {\n\t\t\t\tif ( mergeFormats.formats === formats ) {\n\t\t\t\t\treturn mergeFormats.newFormats;\n\t\t\t\t}\n\n\t\t\t\tconst newFormats = formats\n\t\t\t\t\t? [ format, ...formats ]\n\t\t\t\t\t: [ format ];\n\n\t\t\t\tmergeFormats.formats = formats;\n\t\t\t\tmergeFormats.newFormats = newFormats;\n\n\t\t\t\treturn newFormats;\n\t\t\t}\n\n\t\t\t// Since the formats parameter can be `undefined`, preset\n\t\t\t// `mergeFormats` with a new reference.\n\t\t\tmergeFormats.newFormats = [ format ];\n\n\t\t\tmergePair( accumulator, {\n\t\t\t\t...value,\n\t\t\t\tformats: Array.from( value.formats, mergeFormats ),\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Creates a rich text value from a DOM element and range that should be\n * multiline.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {Array}   [$1.currentWrapperTags]   Whether to prepend a line\n *                                            separator.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromMultilineElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element || ! element.hasChildNodes() ) {\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.children.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.children[ index ];\n\n\t\tif ( node.nodeName.toLowerCase() !== multilineTag ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tcurrentWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\t// Multiline value text should be separated by a line separator.\n\t\tif ( index !== 0 || currentWrapperTags.length > 0 ) {\n\t\t\tmergePair( accumulator, {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements:\n\t\t\t\t\tcurrentWrapperTags.length > 0\n\t\t\t\t\t\t? [ currentWrapperTags ]\n\t\t\t\t\t\t: [ , ],\n\t\t\t\ttext: LINE_SEPARATOR,\n\t\t\t} );\n\t\t}\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\t\tmergePair( accumulator, value );\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Gets the attributes of an element in object shape.\n *\n * @param {Object}  $1         Named argements.\n * @param {Element} $1.element Element to get attributes from.\n *\n * @return {Object|void} Attribute object or `undefined` if the element has no\n *                       attributes.\n */\nfunction getAttributes( { element } ) {\n\tif ( ! element.hasAttributes() ) {\n\t\treturn;\n\t}\n\n\tconst length = element.attributes.length;\n\tlet accumulator;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst { name, value } = element.attributes[ i ];\n\n\t\tif ( name.indexOf( 'data-rich-text-' ) === 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst safeName = /^on/i.test( name )\n\t\t\t? 'data-disable-rich-text-' + name\n\t\t\t: name;\n\n\t\taccumulator = accumulator || {};\n\t\taccumulator[ safeName ] = value;\n\t}\n\n\treturn accumulator;\n}\n","/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\nimport { create } from './create';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Concats a pair of rich text values. Not that this mutates `a` and does NOT\n * normalise formats!\n *\n * @param {Object} a Value to mutate.\n * @param {Object} b Value to add read from.\n *\n * @return {Object} `a`, mutated.\n */\nexport function mergePair( a, b ) {\n\ta.formats = a.formats.concat( b.formats );\n\ta.replacements = a.replacements.concat( b.replacements );\n\ta.text += b.text;\n\n\treturn a;\n}\n\n/**\n * Combine all Rich Text values into one. This is similar to\n * `String.prototype.concat`.\n *\n * @param {...RichTextValue} values Objects to combine.\n *\n * @return {RichTextValue} A new value combining all given records.\n */\nexport function concat( ...values ) {\n\treturn normaliseFormats( values.reduce( mergePair, create() ) );\n}\n","/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormatList} RichTextFormatList */\n\n/**\n * Gets the all format objects at the start of the selection.\n *\n * @param {RichTextValue} value                Value to inspect.\n * @param {Array}         EMPTY_ACTIVE_FORMATS Array to return if there are no\n *                                             active formats.\n *\n * @return {RichTextFormatList} Active format objects.\n */\nexport function getActiveFormats(\n\t{ formats, start, end, activeFormats },\n\tEMPTY_ACTIVE_FORMATS = []\n) {\n\tif ( start === undefined ) {\n\t\treturn EMPTY_ACTIVE_FORMATS;\n\t}\n\n\tif ( start === end ) {\n\t\t// For a collapsed caret, it is possible to override the active formats.\n\t\tif ( activeFormats ) {\n\t\t\treturn activeFormats;\n\t\t}\n\n\t\tconst formatsBefore = formats[ start - 1 ] || EMPTY_ACTIVE_FORMATS;\n\t\tconst formatsAfter = formats[ start ] || EMPTY_ACTIVE_FORMATS;\n\n\t\t// By default, select the lowest amount of formats possible (which means\n\t\t// the caret is positioned outside the format boundary). The user can\n\t\t// then use arrow keys to define `activeFormats`.\n\t\tif ( formatsBefore.length < formatsAfter.length ) {\n\t\t\treturn formatsBefore;\n\t\t}\n\n\t\treturn formatsAfter;\n\t}\n\n\treturn formats[ start ] || EMPTY_ACTIVE_FORMATS;\n}\n","/**\n * External dependencies\n */\n\nimport { find } from 'lodash';\n\n/**\n * Internal dependencies\n */\n\nimport { getActiveFormats } from './get-active-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Gets the format object by type at the start of the selection. This can be\n * used to get e.g. the URL of a link format at the current selection, but also\n * to check if a format is active at the selection. Returns undefined if there\n * is no format at the selection.\n *\n * @param {RichTextValue} value      Value to inspect.\n * @param {string}        formatType Format type to look for.\n *\n * @return {RichTextFormat|undefined} Active format object of the specified\n *                                    type, or undefined.\n */\nexport function getActiveFormat( value, formatType ) {\n\treturn find( getActiveFormats( value ), { type: formatType } );\n}\n","/**\n * Internal dependencies\n */\n\nimport { OBJECT_REPLACEMENT_CHARACTER } from './special-characters';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Gets the active object, if there is any.\n *\n * @param {RichTextValue} value Value to inspect.\n *\n * @return {RichTextFormat|void} Active object, or undefined.\n */\nexport function getActiveObject( { start, end, replacements, text } ) {\n\tif ( start + 1 !== end || text[ start ] !== OBJECT_REPLACEMENT_CHARACTER ) {\n\t\treturn;\n\t}\n\n\treturn replacements[ start ];\n}\n","/**\n * Internal dependencies\n */\nimport {\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tLINE_SEPARATOR,\n} from './special-characters';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\nconst pattern = new RegExp(\n\t`[${ OBJECT_REPLACEMENT_CHARACTER }${ LINE_SEPARATOR }]`,\n\t'g'\n);\n\n/**\n * Get the textual content of a Rich Text value. This is similar to\n * `Element.textContent`.\n *\n * @param {RichTextValue} value Value to use.\n *\n * @return {string} The text content.\n */\nexport function getTextContent( { text } ) {\n\treturn text.replace( pattern, ( c ) =>\n\t\tc === OBJECT_REPLACEMENT_CHARACTER ? '' : '\\n'\n\t);\n}\n","/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Check if the selection of a Rich Text value is collapsed or not. Collapsed\n * means that no characters are selected, but there is a caret present. If there\n * is no selection, `undefined` will be returned. This is similar to\n * `window.getSelection().isCollapsed()`.\n *\n * @param {RichTextValue} value The rich text value to check.\n *\n * @return {boolean|undefined} True if the selection is collapsed, false if not,\n *                             undefined if there is no selection.\n */\nexport function isCollapsed( { start, end } ) {\n\tif ( start === undefined || end === undefined ) {\n\t\treturn;\n\t}\n\n\treturn start === end;\n}\n","/**\n * Internal dependencies\n */\nimport { LINE_SEPARATOR } from './special-characters';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Check if a Rich Text value is Empty, meaning it contains no text or any\n * objects (such as images).\n *\n * @param {RichTextValue} value Value to use.\n *\n * @return {boolean} True if the value is empty, false if not.\n */\nexport function isEmpty( { text } ) {\n\treturn text.length === 0;\n}\n\n/**\n * Check if the current collapsed selection is on an empty line in case of a\n * multiline value.\n *\n * @param {RichTextValue} value Value te check.\n *\n * @return {boolean} True if the line is empty, false if not.\n */\nexport function isEmptyLine( { text, start, end } ) {\n\tif ( start !== end ) {\n\t\treturn false;\n\t}\n\n\tif ( text.length === 0 ) {\n\t\treturn true;\n\t}\n\n\tif ( start === 0 && text.slice( 0, 1 ) === LINE_SEPARATOR ) {\n\t\treturn true;\n\t}\n\n\tif ( start === text.length && text.slice( -1 ) === LINE_SEPARATOR ) {\n\t\treturn true;\n\t}\n\n\treturn (\n\t\ttext.slice( start - 1, end + 1 ) ===\n\t\t`${ LINE_SEPARATOR }${ LINE_SEPARATOR }`\n\t);\n}\n","/**\n * Internal dependencies\n */\n\nimport { create } from './create';\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Combine an array of Rich Text values into one, optionally separated by\n * `separator`, which can be a Rich Text value, HTML string, or plain text\n * string. This is similar to `Array.prototype.join`.\n *\n * @param {Array<RichTextValue>} values      An array of values to join.\n * @param {string|RichTextValue} [separator] Separator string or value.\n *\n * @return {RichTextValue} A new combined value.\n */\nexport function join( values, separator = '' ) {\n\tif ( typeof separator === 'string' ) {\n\t\tseparator = create( { text: separator } );\n\t}\n\n\treturn normaliseFormats(\n\t\tvalues.reduce( ( accumlator, { formats, replacements, text } ) => ( {\n\t\t\tformats: accumlator.formats.concat( separator.formats, formats ),\n\t\t\treplacements: accumlator.replacements.concat(\n\t\t\t\tseparator.replacements,\n\t\t\t\treplacements\n\t\t\t),\n\t\t\ttext: accumlator.text + separator.text + text,\n\t\t} ) )\n\t);\n}\n","/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\n/**\n * @typedef {Object} WPFormat\n *\n * @property {string}   name        A string identifying the format. Must be\n *                                  unique across all registered formats.\n * @property {string}   tagName     The HTML tag this format will wrap the\n *                                  selection with.\n * @property {string}   [className] A class to match the format.\n * @property {string}   title       Name of the format.\n * @property {Function} edit        Should return a component for the user to\n *                                  interact with the new registered format.\n */\n\n/**\n * Registers a new format provided a unique name and an object defining its\n * behavior.\n *\n * @param {string}   name     Format name.\n * @param {WPFormat} settings Format settings.\n *\n * @return {WPFormat|undefined} The format, if it has been successfully\n *                              registered; otherwise `undefined`.\n */\nexport function registerFormatType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...settings,\n\t};\n\n\tif ( typeof settings.name !== 'string' ) {\n\t\twindow.console.error( 'Format names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-format'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( select( richTextStore ).getFormatType( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format \"' + settings.name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.tagName !== 'string' || settings.tagName === '' ) {\n\t\twindow.console.error( 'Format tag names must be a string.' );\n\t\treturn;\n\t}\n\n\tif (\n\t\t( typeof settings.className !== 'string' ||\n\t\t\tsettings.className === '' ) &&\n\t\tsettings.className !== null\n\t) {\n\t\twindow.console.error(\n\t\t\t'Format class names must be a string, or null to handle bare elements.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[_a-zA-Z]+[a-zA-Z0-9-]*$/.test( settings.className ) ) {\n\t\twindow.console.error(\n\t\t\t'A class name must begin with a letter, followed by any number of hyphens, letters, or numbers.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( settings.className === null ) {\n\t\tconst formatTypeForBareElement = select(\n\t\t\trichTextStore\n\t\t).getFormatTypeForBareElement( settings.tagName );\n\n\t\tif ( formatTypeForBareElement ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForBareElement.name }\" is already registered to handle bare tag name \"${ settings.tagName }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tconst formatTypeForClassName = select(\n\t\t\trichTextStore\n\t\t).getFormatTypeForClassName( settings.className );\n\n\t\tif ( formatTypeForClassName ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForClassName.name }\" is already registered to handle class name \"${ settings.className }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' + settings.name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( 'keywords' in settings && settings.keywords.length > 3 ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' +\n\t\t\t\tsettings.name +\n\t\t\t\t'\" can have a maximum of 3 keywords.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.title !== 'string' ) {\n\t\twindow.console.error( 'Format titles must be strings.' );\n\t\treturn;\n\t}\n\n\tdispatch( richTextStore ).addFormatTypes( settings );\n\n\treturn settings;\n}\n","/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Remove any format object from a Rich Text value by type from the given\n * `startIndex` to the given `endIndex`. Indices are retrieved from the\n * selection if none are provided.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {string}        formatType   Format type to remove.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the format applied.\n */\nexport function removeFormat(\n\tvalue,\n\tformatType,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, activeFormats } = value;\n\tconst newFormats = formats.slice();\n\n\t// If the selection is collapsed, expand start and end to the edges of the\n\t// format.\n\tif ( startIndex === endIndex ) {\n\t\tconst format = newFormats[ startIndex ]?.find(\n\t\t\t( { type } ) => type === formatType\n\t\t);\n\n\t\tif ( format ) {\n\t\t\twhile (\n\t\t\t\tnewFormats[ startIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, startIndex, formatType );\n\t\t\t\tstartIndex--;\n\t\t\t}\n\n\t\t\tendIndex++;\n\n\t\t\twhile (\n\t\t\t\tnewFormats[ endIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, endIndex, formatType );\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( let i = startIndex; i < endIndex; i++ ) {\n\t\t\tif ( newFormats[ i ] ) {\n\t\t\t\tfilterFormats( newFormats, i, formatType );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn normaliseFormats( {\n\t\t...value,\n\t\tformats: newFormats,\n\t\tactiveFormats:\n\t\t\tactiveFormats?.filter( ( { type } ) => type !== formatType ) || [],\n\t} );\n}\n\nfunction filterFormats( formats, index, formatType ) {\n\tconst newFormats = formats[ index ].filter(\n\t\t( { type } ) => type !== formatType\n\t);\n\n\tif ( newFormats.length ) {\n\t\tformats[ index ] = newFormats;\n\t} else {\n\t\tdelete formats[ index ];\n\t}\n}\n","/**\n * Internal dependencies\n */\n\nimport { create } from './create';\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Insert a Rich Text value, an HTML string, or a plain text string, into a\n * Rich Text value at the given `startIndex`. Any content between `startIndex`\n * and `endIndex` will be removed. Indices are retrieved from the selection if\n * none are provided.\n *\n * @param {RichTextValue}        value         Value to modify.\n * @param {RichTextValue|string} valueToInsert Value to insert.\n * @param {number}               [startIndex]  Start index.\n * @param {number}               [endIndex]    End index.\n *\n * @return {RichTextValue} A new value with the value inserted.\n */\nexport function insert(\n\tvalue,\n\tvalueToInsert,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, replacements, text } = value;\n\n\tif ( typeof valueToInsert === 'string' ) {\n\t\tvalueToInsert = create( { text: valueToInsert } );\n\t}\n\n\tconst index = startIndex + valueToInsert.text.length;\n\n\treturn normaliseFormats( {\n\t\tformats: formats\n\t\t\t.slice( 0, startIndex )\n\t\t\t.concat( valueToInsert.formats, formats.slice( endIndex ) ),\n\t\treplacements: replacements\n\t\t\t.slice( 0, startIndex )\n\t\t\t.concat(\n\t\t\t\tvalueToInsert.replacements,\n\t\t\t\treplacements.slice( endIndex )\n\t\t\t),\n\t\ttext:\n\t\t\ttext.slice( 0, startIndex ) +\n\t\t\tvalueToInsert.text +\n\t\t\ttext.slice( endIndex ),\n\t\tstart: index,\n\t\tend: index,\n\t} );\n}\n","/**\n * Internal dependencies\n */\n\nimport { insert } from './insert';\nimport { create } from './create';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Remove content from a Rich Text value between the given `startIndex` and\n * `endIndex`. Indices are retrieved from the selection if none are provided.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the content removed.\n */\nexport function remove( value, startIndex, endIndex ) {\n\treturn insert( value, create(), startIndex, endIndex );\n}\n","/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Search a Rich Text value and replace the match(es) with `replacement`. This\n * is similar to `String.prototype.replace`.\n *\n * @param {RichTextValue}   value       The value to modify.\n * @param {RegExp|string}   pattern     A RegExp object or literal. Can also be\n *                                      a string. It is treated as a verbatim\n *                                      string and is not interpreted as a\n *                                      regular expression. Only the first\n *                                      occurrence will be replaced.\n * @param {Function|string} replacement The match or matches are replaced with\n *                                      the specified or the value returned by\n *                                      the specified function.\n *\n * @return {RichTextValue} A new value with replacements applied.\n */\nexport function replace(\n\t{ formats, replacements, text, start, end },\n\tpattern,\n\treplacement\n) {\n\ttext = text.replace( pattern, ( match, ...rest ) => {\n\t\tconst offset = rest[ rest.length - 2 ];\n\t\tlet newText = replacement;\n\t\tlet newFormats;\n\t\tlet newReplacements;\n\n\t\tif ( typeof newText === 'function' ) {\n\t\t\tnewText = replacement( match, ...rest );\n\t\t}\n\n\t\tif ( typeof newText === 'object' ) {\n\t\t\tnewFormats = newText.formats;\n\t\t\tnewReplacements = newText.replacements;\n\t\t\tnewText = newText.text;\n\t\t} else {\n\t\t\tnewFormats = Array( newText.length );\n\t\t\tnewReplacements = Array( newText.length );\n\n\t\t\tif ( formats[ offset ] ) {\n\t\t\t\tnewFormats = newFormats.fill( formats[ offset ] );\n\t\t\t}\n\t\t}\n\n\t\tformats = formats\n\t\t\t.slice( 0, offset )\n\t\t\t.concat( newFormats, formats.slice( offset + match.length ) );\n\t\treplacements = replacements\n\t\t\t.slice( 0, offset )\n\t\t\t.concat(\n\t\t\t\tnewReplacements,\n\t\t\t\treplacements.slice( offset + match.length )\n\t\t\t);\n\n\t\tif ( start ) {\n\t\t\tstart = end = offset + newText.length;\n\t\t}\n\n\t\treturn newText;\n\t} );\n\n\treturn normaliseFormats( { formats, replacements, text, start, end } );\n}\n","/**\n * Internal dependencies\n */\n\nimport { insert } from './insert';\nimport { LINE_SEPARATOR } from './special-characters';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Insert a line break character into a Rich Text value at the given\n * `startIndex`. Any content between `startIndex` and `endIndex` will be\n * removed. Indices are retrieved from the selection if none are provided.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the value inserted.\n */\nexport function insertLineSeparator(\n\tvalue,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst beforeText = value.text.slice( 0, startIndex );\n\tconst previousLineSeparatorIndex = beforeText.lastIndexOf( LINE_SEPARATOR );\n\tconst previousLineSeparatorFormats =\n\t\tvalue.replacements[ previousLineSeparatorIndex ];\n\tlet replacements = [ , ];\n\n\tif ( previousLineSeparatorFormats ) {\n\t\treplacements = [ previousLineSeparatorFormats ];\n\t}\n\n\tconst valueToInsert = {\n\t\tformats: [ , ],\n\t\treplacements,\n\t\ttext: LINE_SEPARATOR,\n\t};\n\n\treturn insert( value, valueToInsert, startIndex, endIndex );\n}\n","/**\n * Internal dependencies\n */\n\nimport { insert } from './insert';\nimport { OBJECT_REPLACEMENT_CHARACTER } from './special-characters';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Insert a format as an object into a Rich Text value at the given\n * `startIndex`. Any content between `startIndex` and `endIndex` will be\n * removed. Indices are retrieved from the selection if none are provided.\n *\n * @param {RichTextValue}  value          Value to modify.\n * @param {RichTextFormat} formatToInsert Format to insert as object.\n * @param {number}         [startIndex]   Start index.\n * @param {number}         [endIndex]     End index.\n *\n * @return {RichTextValue} A new value with the object inserted.\n */\nexport function insertObject( value, formatToInsert, startIndex, endIndex ) {\n\tconst valueToInsert = {\n\t\tformats: [ , ],\n\t\treplacements: [ formatToInsert ],\n\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t};\n\n\treturn insert( value, valueToInsert, startIndex, endIndex );\n}\n","/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Slice a Rich Text value from `startIndex` to `endIndex`. Indices are\n * retrieved from the selection if none are provided. This is similar to\n * `String.prototype.slice`.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new extracted value.\n */\nexport function slice( value, startIndex = value.start, endIndex = value.end ) {\n\tconst { formats, replacements, text } = value;\n\n\tif ( startIndex === undefined || endIndex === undefined ) {\n\t\treturn { ...value };\n\t}\n\n\treturn {\n\t\tformats: formats.slice( startIndex, endIndex ),\n\t\treplacements: replacements.slice( startIndex, endIndex ),\n\t\ttext: text.slice( startIndex, endIndex ),\n\t};\n}\n","/**\n * Internal dependencies\n */\n\nimport { replace } from './replace';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Split a Rich Text value in two at the given `startIndex` and `endIndex`, or\n * split at the given separator. This is similar to `String.prototype.split`.\n * Indices are retrieved from the selection if none are provided.\n *\n * @param {RichTextValue} value\n * @param {number|string} [string] Start index, or string at which to split.\n *\n * @return {Array<RichTextValue>|undefined} An array of new values.\n */\nexport function split( { formats, replacements, text, start, end }, string ) {\n\tif ( typeof string !== 'string' ) {\n\t\treturn splitAtSelection( ...arguments );\n\t}\n\n\tlet nextStart = 0;\n\n\treturn text.split( string ).map( ( substring ) => {\n\t\tconst startIndex = nextStart;\n\t\tconst value = {\n\t\t\tformats: formats.slice( startIndex, startIndex + substring.length ),\n\t\t\treplacements: replacements.slice(\n\t\t\t\tstartIndex,\n\t\t\t\tstartIndex + substring.length\n\t\t\t),\n\t\t\ttext: substring,\n\t\t};\n\n\t\tnextStart += string.length + substring.length;\n\n\t\tif ( start !== undefined && end !== undefined ) {\n\t\t\tif ( start >= startIndex && start < nextStart ) {\n\t\t\t\tvalue.start = start - startIndex;\n\t\t\t} else if ( start < startIndex && end > startIndex ) {\n\t\t\t\tvalue.start = 0;\n\t\t\t}\n\n\t\t\tif ( end >= startIndex && end < nextStart ) {\n\t\t\t\tvalue.end = end - startIndex;\n\t\t\t} else if ( start < nextStart && end > nextStart ) {\n\t\t\t\tvalue.end = substring.length;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t} );\n}\n\nfunction splitAtSelection(\n\t{ formats, replacements, text, start, end },\n\tstartIndex = start,\n\tendIndex = end\n) {\n\tif ( start === undefined || end === undefined ) {\n\t\treturn;\n\t}\n\n\tconst before = {\n\t\tformats: formats.slice( 0, startIndex ),\n\t\treplacements: replacements.slice( 0, startIndex ),\n\t\ttext: text.slice( 0, startIndex ),\n\t};\n\tconst after = {\n\t\tformats: formats.slice( endIndex ),\n\t\treplacements: replacements.slice( endIndex ),\n\t\ttext: text.slice( endIndex ),\n\t\tstart: 0,\n\t\tend: 0,\n\t};\n\n\treturn [\n\t\t// Ensure newlines are trimmed.\n\t\treplace( before, /\\u2028+$/, '' ),\n\t\treplace( after, /^\\u2028+/, '' ),\n\t];\n}\n","/**\n * Internal dependencies\n */\n\nimport { getActiveFormats } from './get-active-formats';\nimport { getFormatType } from './get-format-type';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\nfunction restoreOnAttributes( attributes, isEditableTree ) {\n\tif ( isEditableTree ) {\n\t\treturn attributes;\n\t}\n\n\tconst newAttributes = {};\n\n\tfor ( const key in attributes ) {\n\t\tlet newKey = key;\n\t\tif ( key.startsWith( 'data-disable-rich-text-' ) ) {\n\t\t\tnewKey = key.slice( 'data-disable-rich-text-'.length );\n\t\t}\n\n\t\tnewAttributes[ newKey ] = attributes[ key ];\n\t}\n\n\treturn newAttributes;\n}\n\n/**\n * Converts a format object to information that can be used to create an element\n * from (type, attributes and object).\n *\n * @param {Object}  $1                        Named parameters.\n * @param {string}  $1.type                   The format type.\n * @param {Object}  $1.attributes             The format attributes.\n * @param {Object}  $1.unregisteredAttributes The unregistered format\n *                                            attributes.\n * @param {boolean} $1.object                 Whether or not it is an object\n *                                            format.\n * @param {boolean} $1.boundaryClass          Whether or not to apply a boundary\n *                                            class.\n * @param {boolean} $1.isEditableTree\n *\n * @return {Object} Information to be used for element creation.\n */\nfunction fromFormat( {\n\ttype,\n\tattributes,\n\tunregisteredAttributes,\n\tobject,\n\tboundaryClass,\n\tisEditableTree,\n} ) {\n\tconst formatType = getFormatType( type );\n\n\tlet elementAttributes = {};\n\n\tif ( boundaryClass ) {\n\t\telementAttributes[ 'data-rich-text-format-boundary' ] = 'true';\n\t}\n\n\tif ( ! formatType ) {\n\t\tif ( attributes ) {\n\t\t\telementAttributes = { ...attributes, ...elementAttributes };\n\t\t}\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tattributes: restoreOnAttributes(\n\t\t\t\telementAttributes,\n\t\t\t\tisEditableTree\n\t\t\t),\n\t\t\tobject,\n\t\t};\n\t}\n\n\telementAttributes = { ...unregisteredAttributes, ...elementAttributes };\n\n\tfor ( const name in attributes ) {\n\t\tconst key = formatType.attributes\n\t\t\t? formatType.attributes[ name ]\n\t\t\t: false;\n\n\t\tif ( key ) {\n\t\t\telementAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\telementAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\tif ( formatType.className ) {\n\t\tif ( elementAttributes.class ) {\n\t\t\telementAttributes.class = `${ formatType.className } ${ elementAttributes.class }`;\n\t\t} else {\n\t\t\telementAttributes.class = formatType.className;\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.tagName,\n\t\tobject: formatType.object,\n\t\tattributes: restoreOnAttributes( elementAttributes, isEditableTree ),\n\t};\n}\n\n/**\n * Checks if both arrays of formats up until a certain index are equal.\n *\n * @param {Array}  a     Array of formats to compare.\n * @param {Array}  b     Array of formats to compare.\n * @param {number} index Index to check until.\n */\nfunction isEqualUntil( a, b, index ) {\n\tdo {\n\t\tif ( a[ index ] !== b[ index ] ) {\n\t\t\treturn false;\n\t\t}\n\t} while ( index-- );\n\n\treturn true;\n}\n\nexport function toTree( {\n\tvalue,\n\tmultilineTag,\n\tpreserveWhiteSpace,\n\tcreateEmpty,\n\tappend,\n\tgetLastChild,\n\tgetParent,\n\tisText,\n\tgetText,\n\tremove,\n\tappendText,\n\tonStartIndex,\n\tonEndIndex,\n\tisEditableTree,\n\tplaceholder,\n} ) {\n\tconst { formats, replacements, text, start, end } = value;\n\tconst formatsLength = formats.length + 1;\n\tconst tree = createEmpty();\n\tconst multilineFormat = { type: multilineTag };\n\tconst activeFormats = getActiveFormats( value );\n\tconst deepestActiveFormat = activeFormats[ activeFormats.length - 1 ];\n\n\tlet lastSeparatorFormats;\n\tlet lastCharacterFormats;\n\tlet lastCharacter;\n\n\t// If we're building a multiline tree, start off with a multiline element.\n\tif ( multilineTag ) {\n\t\tappend( append( tree, { type: multilineTag } ), '' );\n\t\tlastCharacterFormats = lastSeparatorFormats = [ multilineFormat ];\n\t} else {\n\t\tappend( tree, '' );\n\t}\n\n\tfor ( let i = 0; i < formatsLength; i++ ) {\n\t\tconst character = text.charAt( i );\n\t\tconst shouldInsertPadding =\n\t\t\tisEditableTree &&\n\t\t\t// Pad the line if the line is empty.\n\t\t\t( ! lastCharacter ||\n\t\t\t\tlastCharacter === LINE_SEPARATOR ||\n\t\t\t\t// Pad the line if the previous character is a line break, otherwise\n\t\t\t\t// the line break won't be visible.\n\t\t\t\tlastCharacter === '\\n' );\n\n\t\tlet characterFormats = formats[ i ];\n\n\t\t// Set multiline tags in queue for building the tree.\n\t\tif ( multilineTag ) {\n\t\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\t\tcharacterFormats = lastSeparatorFormats = (\n\t\t\t\t\treplacements[ i ] || []\n\t\t\t\t).reduce(\n\t\t\t\t\t( accumulator, format ) => {\n\t\t\t\t\t\taccumulator.push( format, multilineFormat );\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t},\n\t\t\t\t\t[ multilineFormat ]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcharacterFormats = [\n\t\t\t\t\t...lastSeparatorFormats,\n\t\t\t\t\t...( characterFormats || [] ),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tlet pointer = getLastChild( tree );\n\n\t\tif ( shouldInsertPadding && character === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tappend( getParent( node ), ZWNBSP );\n\t\t}\n\n\t\t// Set selection for the start of line.\n\t\tif ( lastCharacter === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tif ( onStartIndex && start === i ) {\n\t\t\t\tonStartIndex( tree, node );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === i ) {\n\t\t\t\tonEndIndex( tree, node );\n\t\t\t}\n\t\t}\n\n\t\tif ( characterFormats ) {\n\t\t\tcharacterFormats.forEach( ( format, formatIndex ) => {\n\t\t\t\tif (\n\t\t\t\t\tpointer &&\n\t\t\t\t\tlastCharacterFormats &&\n\t\t\t\t\t// Reuse the last element if all formats remain the same.\n\t\t\t\t\tisEqualUntil(\n\t\t\t\t\t\tcharacterFormats,\n\t\t\t\t\t\tlastCharacterFormats,\n\t\t\t\t\t\tformatIndex\n\t\t\t\t\t) &&\n\t\t\t\t\t// Do not reuse the last element if the character is a\n\t\t\t\t\t// line separator.\n\t\t\t\t\t( character !== LINE_SEPARATOR ||\n\t\t\t\t\t\tcharacterFormats.length - 1 !== formatIndex )\n\t\t\t\t) {\n\t\t\t\t\tpointer = getLastChild( pointer );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { type, attributes, unregisteredAttributes } = format;\n\n\t\t\t\tconst boundaryClass =\n\t\t\t\t\tisEditableTree &&\n\t\t\t\t\tcharacter !== LINE_SEPARATOR &&\n\t\t\t\t\tformat === deepestActiveFormat;\n\n\t\t\t\tconst parent = getParent( pointer );\n\t\t\t\tconst newNode = append(\n\t\t\t\t\tparent,\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tunregisteredAttributes,\n\t\t\t\t\t\tboundaryClass,\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tif ( isText( pointer ) && getText( pointer ).length === 0 ) {\n\t\t\t\t\tremove( pointer );\n\t\t\t\t}\n\n\t\t\t\tpointer = append( newNode, '' );\n\t\t\t} );\n\t\t}\n\n\t\t// No need for further processing if the character is a line separator.\n\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\tlastCharacterFormats = characterFormats;\n\t\t\tlastCharacter = character;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If there is selection at 0, handle it before characters are inserted.\n\t\tif ( i === 0 ) {\n\t\t\tif ( onStartIndex && start === 0 ) {\n\t\t\t\tonStartIndex( tree, pointer );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === 0 ) {\n\t\t\t\tonEndIndex( tree, pointer );\n\t\t\t}\n\t\t}\n\n\t\tif ( character === OBJECT_REPLACEMENT_CHARACTER ) {\n\t\t\tif ( ! isEditableTree && replacements[ i ]?.type === 'script' ) {\n\t\t\t\tpointer = append(\n\t\t\t\t\tgetParent( pointer ),\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\ttype: 'script',\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t\tappend( pointer, {\n\t\t\t\t\thtml: decodeURIComponent(\n\t\t\t\t\t\treplacements[ i ].attributes[ 'data-rich-text-script' ]\n\t\t\t\t\t),\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tpointer = append(\n\t\t\t\t\tgetParent( pointer ),\n\t\t\t\t\tfromFormat( {\n\t\t\t\t\t\t...replacements[ i ],\n\t\t\t\t\t\tobject: true,\n\t\t\t\t\t\tisEditableTree,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( ! preserveWhiteSpace && character === '\\n' ) {\n\t\t\tpointer = append( getParent( pointer ), {\n\t\t\t\ttype: 'br',\n\t\t\t\tattributes: isEditableTree\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t'data-rich-text-line-break': 'true',\n\t\t\t\t\t  }\n\t\t\t\t\t: undefined,\n\t\t\t\tobject: true,\n\t\t\t} );\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( ! isText( pointer ) ) {\n\t\t\tpointer = append( getParent( pointer ), character );\n\t\t} else {\n\t\t\tappendText( pointer, character );\n\t\t}\n\n\t\tif ( onStartIndex && start === i + 1 ) {\n\t\t\tonStartIndex( tree, pointer );\n\t\t}\n\n\t\tif ( onEndIndex && end === i + 1 ) {\n\t\t\tonEndIndex( tree, pointer );\n\t\t}\n\n\t\tif ( shouldInsertPadding && i === text.length ) {\n\t\t\tappend( getParent( pointer ), ZWNBSP );\n\n\t\t\tif ( placeholder && text.length === 0 ) {\n\t\t\t\tappend( getParent( pointer ), {\n\t\t\t\t\ttype: 'span',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\t'data-rich-text-placeholder': placeholder,\n\t\t\t\t\t\t// Necessary to prevent the placeholder from catching\n\t\t\t\t\t\t// selection. The placeholder is also not editable after\n\t\t\t\t\t\t// all.\n\t\t\t\t\t\tcontenteditable: 'false',\n\t\t\t\t\t\tstyle: 'pointer-events:none;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;',\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tlastCharacterFormats = characterFormats;\n\t\tlastCharacter = character;\n\t}\n\n\treturn tree;\n}\n","/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\n\n/** @typedef {import('./register-format-type').RichTextFormatType} RichTextFormatType */\n\n/**\n * Returns a registered format type.\n *\n * @param {string} name Format name.\n *\n * @return {RichTextFormatType|undefined} Format type.\n */\nexport function getFormatType( name ) {\n\treturn select( richTextStore ).getFormatType( name );\n}\n","/**\n * Internal dependencies\n */\n\nimport { toTree } from './to-tree';\nimport { createElement } from './create-element';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Creates a path as an array of indices from the given root node to the given\n * node.\n *\n * @param {Node}        node     Node to find the path of.\n * @param {HTMLElement} rootNode Root node to find the path from.\n * @param {Array}       path     Initial path to build on.\n *\n * @return {Array} The path from the root node to the node.\n */\nfunction createPathToNode( node, rootNode, path ) {\n\tconst parentNode = node.parentNode;\n\tlet i = 0;\n\n\twhile ( ( node = node.previousSibling ) ) {\n\t\ti++;\n\t}\n\n\tpath = [ i, ...path ];\n\n\tif ( parentNode !== rootNode ) {\n\t\tpath = createPathToNode( parentNode, rootNode, path );\n\t}\n\n\treturn path;\n}\n\n/**\n * Gets a node given a path (array of indices) from the given node.\n *\n * @param {HTMLElement} node Root node to find the wanted node in.\n * @param {Array}       path Path (indices) to the wanted node.\n *\n * @return {Object} Object with the found node and the remaining offset (if any).\n */\nfunction getNodeByPath( node, path ) {\n\tpath = [ ...path ];\n\n\twhile ( node && path.length > 1 ) {\n\t\tnode = node.childNodes[ path.shift() ];\n\t}\n\n\treturn {\n\t\tnode,\n\t\toffset: path[ 0 ],\n\t};\n}\n\nfunction append( element, child ) {\n\tif ( typeof child === 'string' ) {\n\t\tchild = element.ownerDocument.createTextNode( child );\n\t}\n\n\tconst { type, attributes } = child;\n\n\tif ( type ) {\n\t\tchild = element.ownerDocument.createElement( type );\n\n\t\tfor ( const key in attributes ) {\n\t\t\tchild.setAttribute( key, attributes[ key ] );\n\t\t}\n\t}\n\n\treturn element.appendChild( child );\n}\n\nfunction appendText( node, text ) {\n\tnode.appendData( text );\n}\n\nfunction getLastChild( { lastChild } ) {\n\treturn lastChild;\n}\n\nfunction getParent( { parentNode } ) {\n\treturn parentNode;\n}\n\nfunction isText( node ) {\n\treturn node.nodeType === node.TEXT_NODE;\n}\n\nfunction getText( { nodeValue } ) {\n\treturn nodeValue;\n}\n\nfunction remove( node ) {\n\treturn node.parentNode.removeChild( node );\n}\n\nexport function toDom( {\n\tvalue,\n\tmultilineTag,\n\tprepareEditableTree,\n\tisEditableTree = true,\n\tplaceholder,\n\tdoc = document,\n} ) {\n\tlet startPath = [];\n\tlet endPath = [];\n\n\tif ( prepareEditableTree ) {\n\t\tvalue = {\n\t\t\t...value,\n\t\t\tformats: prepareEditableTree( value ),\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new instance of a DOM tree upon which RichText operations can be\n\t * applied.\n\t *\n\t * Note: The current implementation will return a shared reference, reset on\n\t * each call to `createEmpty`. Therefore, you should not hold a reference to\n\t * the value to operate upon asynchronously, as it may have unexpected results.\n\t *\n\t * @return {Object} RichText tree.\n\t */\n\tconst createEmpty = () => createElement( doc, '' );\n\n\tconst tree = toTree( {\n\t\tvalue,\n\t\tmultilineTag,\n\t\tcreateEmpty,\n\t\tappend,\n\t\tgetLastChild,\n\t\tgetParent,\n\t\tisText,\n\t\tgetText,\n\t\tremove,\n\t\tappendText,\n\t\tonStartIndex( body, pointer ) {\n\t\t\tstartPath = createPathToNode( pointer, body, [\n\t\t\t\tpointer.nodeValue.length,\n\t\t\t] );\n\t\t},\n\t\tonEndIndex( body, pointer ) {\n\t\t\tendPath = createPathToNode( pointer, body, [\n\t\t\t\tpointer.nodeValue.length,\n\t\t\t] );\n\t\t},\n\t\tisEditableTree,\n\t\tplaceholder,\n\t} );\n\n\treturn {\n\t\tbody: tree,\n\t\tselection: { startPath, endPath },\n\t};\n}\n\n/**\n * Create an `Element` tree from a Rich Text value and applies the difference to\n * the `Element` tree contained by `current`. If a `multilineTag` is provided,\n * text separated by two new lines will be wrapped in an `Element` of that type.\n *\n * @param {Object}        $1                       Named arguments.\n * @param {RichTextValue} $1.value                 Value to apply.\n * @param {HTMLElement}   $1.current               The live root node to apply the element tree to.\n * @param {string}        [$1.multilineTag]        Multiline tag.\n * @param {Function}      [$1.prepareEditableTree] Function to filter editorable formats.\n * @param {boolean}       [$1.__unstableDomOnly]   Only apply elements, no selection.\n * @param {string}        [$1.placeholder]         Placeholder text.\n */\nexport function apply( {\n\tvalue,\n\tcurrent,\n\tmultilineTag,\n\tprepareEditableTree,\n\t__unstableDomOnly,\n\tplaceholder,\n} ) {\n\t// Construct a new element tree in memory.\n\tconst { body, selection } = toDom( {\n\t\tvalue,\n\t\tmultilineTag,\n\t\tprepareEditableTree,\n\t\tplaceholder,\n\t\tdoc: current.ownerDocument,\n\t} );\n\n\tapplyValue( body, current );\n\n\tif ( value.start !== undefined && ! __unstableDomOnly ) {\n\t\tapplySelection( selection, current );\n\t}\n}\n\nexport function applyValue( future, current ) {\n\tlet i = 0;\n\tlet futureChild;\n\n\twhile ( ( futureChild = future.firstChild ) ) {\n\t\tconst currentChild = current.childNodes[ i ];\n\n\t\tif ( ! currentChild ) {\n\t\t\tcurrent.appendChild( futureChild );\n\t\t} else if ( ! currentChild.isEqualNode( futureChild ) ) {\n\t\t\tif (\n\t\t\t\tcurrentChild.nodeName !== futureChild.nodeName ||\n\t\t\t\t( currentChild.nodeType === currentChild.TEXT_NODE &&\n\t\t\t\t\tcurrentChild.data !== futureChild.data )\n\t\t\t) {\n\t\t\t\tcurrent.replaceChild( futureChild, currentChild );\n\t\t\t} else {\n\t\t\t\tconst currentAttributes = currentChild.attributes;\n\t\t\t\tconst futureAttributes = futureChild.attributes;\n\n\t\t\t\tif ( currentAttributes ) {\n\t\t\t\t\tlet ii = currentAttributes.length;\n\n\t\t\t\t\t// Reverse loop because `removeAttribute` on `currentChild`\n\t\t\t\t\t// changes `currentAttributes`.\n\t\t\t\t\twhile ( ii-- ) {\n\t\t\t\t\t\tconst { name } = currentAttributes[ ii ];\n\n\t\t\t\t\t\tif ( ! futureChild.getAttribute( name ) ) {\n\t\t\t\t\t\t\tcurrentChild.removeAttribute( name );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( futureAttributes ) {\n\t\t\t\t\tfor ( let ii = 0; ii < futureAttributes.length; ii++ ) {\n\t\t\t\t\t\tconst { name, value } = futureAttributes[ ii ];\n\n\t\t\t\t\t\tif ( currentChild.getAttribute( name ) !== value ) {\n\t\t\t\t\t\t\tcurrentChild.setAttribute( name, value );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tapplyValue( futureChild, currentChild );\n\t\t\t\tfuture.removeChild( futureChild );\n\t\t\t}\n\t\t} else {\n\t\t\tfuture.removeChild( futureChild );\n\t\t}\n\n\t\ti++;\n\t}\n\n\twhile ( current.childNodes[ i ] ) {\n\t\tcurrent.removeChild( current.childNodes[ i ] );\n\t}\n}\n\n/**\n * Returns true if two ranges are equal, or false otherwise. Ranges are\n * considered equal if their start and end occur in the same container and\n * offset.\n *\n * @param {Range} a First range object to test.\n * @param {Range} b First range object to test.\n *\n * @return {boolean} Whether the two ranges are equal.\n */\nfunction isRangeEqual( a, b ) {\n\treturn (\n\t\ta.startContainer === b.startContainer &&\n\t\ta.startOffset === b.startOffset &&\n\t\ta.endContainer === b.endContainer &&\n\t\ta.endOffset === b.endOffset\n\t);\n}\n\nexport function applySelection( { startPath, endPath }, current ) {\n\tconst { node: startContainer, offset: startOffset } = getNodeByPath(\n\t\tcurrent,\n\t\tstartPath\n\t);\n\tconst { node: endContainer, offset: endOffset } = getNodeByPath(\n\t\tcurrent,\n\t\tendPath\n\t);\n\tconst { ownerDocument } = current;\n\tconst { defaultView } = ownerDocument;\n\tconst selection = defaultView.getSelection();\n\tconst range = ownerDocument.createRange();\n\n\trange.setStart( startContainer, startOffset );\n\trange.setEnd( endContainer, endOffset );\n\n\tconst { activeElement } = ownerDocument;\n\n\tif ( selection.rangeCount > 0 ) {\n\t\t// If the to be added range and the live range are the same, there's no\n\t\t// need to remove the live range and add the equivalent range.\n\t\tif ( isRangeEqual( range, selection.getRangeAt( 0 ) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tselection.removeAllRanges();\n\t}\n\n\tselection.addRange( range );\n\n\t// This function is not intended to cause a shift in focus. Since the above\n\t// selection manipulations may shift focus, ensure that focus is restored to\n\t// its previous state.\n\tif ( activeElement !== ownerDocument.activeElement ) {\n\t\t// The `instanceof` checks protect against edge cases where the focused\n\t\t// element is not of the interface HTMLElement (does not have a `focus`\n\t\t// or `blur` property).\n\t\t//\n\t\t// See: https://github.com/Microsoft/TypeScript/issues/5901#issuecomment-431649653\n\t\tif ( activeElement instanceof defaultView.HTMLElement ) {\n\t\t\tactiveElement.focus();\n\t\t}\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"escapeHtml\"];","/**\n * WordPress dependencies\n */\n\nimport {\n\tescapeEditableHTML,\n\tescapeAttribute,\n\tisValidAttributeName,\n} from '@wordpress/escape-html';\n\n/**\n * Internal dependencies\n */\n\nimport { toTree } from './to-tree';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Create an HTML string from a Rich Text value. If a `multilineTag` is\n * provided, text separated by a line separator will be wrapped in it.\n *\n * @param {Object}        $1                      Named argements.\n * @param {RichTextValue} $1.value                Rich text value.\n * @param {string}        [$1.multilineTag]       Multiline tag.\n * @param {boolean}       [$1.preserveWhiteSpace] Whether or not to use newline\n *                                                characters for line breaks.\n *\n * @return {string} HTML string.\n */\nexport function toHTMLString( { value, multilineTag, preserveWhiteSpace } ) {\n\tconst tree = toTree( {\n\t\tvalue,\n\t\tmultilineTag,\n\t\tpreserveWhiteSpace,\n\t\tcreateEmpty,\n\t\tappend,\n\t\tgetLastChild,\n\t\tgetParent,\n\t\tisText,\n\t\tgetText,\n\t\tremove,\n\t\tappendText,\n\t} );\n\n\treturn createChildrenHTML( tree.children );\n}\n\nfunction createEmpty() {\n\treturn {};\n}\n\nfunction getLastChild( { children } ) {\n\treturn children && children[ children.length - 1 ];\n}\n\nfunction append( parent, object ) {\n\tif ( typeof object === 'string' ) {\n\t\tobject = { text: object };\n\t}\n\n\tobject.parent = parent;\n\tparent.children = parent.children || [];\n\tparent.children.push( object );\n\treturn object;\n}\n\nfunction appendText( object, text ) {\n\tobject.text += text;\n}\n\nfunction getParent( { parent } ) {\n\treturn parent;\n}\n\nfunction isText( { text } ) {\n\treturn typeof text === 'string';\n}\n\nfunction getText( { text } ) {\n\treturn text;\n}\n\nfunction remove( object ) {\n\tconst index = object.parent.children.indexOf( object );\n\n\tif ( index !== -1 ) {\n\t\tobject.parent.children.splice( index, 1 );\n\t}\n\n\treturn object;\n}\n\nfunction createElementHTML( { type, attributes, object, children } ) {\n\tlet attributeString = '';\n\n\tfor ( const key in attributes ) {\n\t\tif ( ! isValidAttributeName( key ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tattributeString += ` ${ key }=\"${ escapeAttribute(\n\t\t\tattributes[ key ]\n\t\t) }\"`;\n\t}\n\n\tif ( object ) {\n\t\treturn `<${ type }${ attributeString }>`;\n\t}\n\n\treturn `<${ type }${ attributeString }>${ createChildrenHTML(\n\t\tchildren\n\t) }</${ type }>`;\n}\n\nfunction createChildrenHTML( children = [] ) {\n\treturn children\n\t\t.map( ( child ) => {\n\t\t\tif ( child.html !== undefined ) {\n\t\t\t\treturn child.html;\n\t\t\t}\n\n\t\t\treturn child.text === undefined\n\t\t\t\t? createElementHTML( child )\n\t\t\t\t: escapeEditableHTML( child.text );\n\t\t} )\n\t\t.join( '' );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"a11y\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\n * WordPress dependencies\n */\n\nimport { speak } from '@wordpress/a11y';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\n\nimport { getActiveFormat } from './get-active-format';\nimport { removeFormat } from './remove-format';\nimport { applyFormat } from './apply-format';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n/** @typedef {import('./create').RichTextFormat} RichTextFormat */\n\n/**\n * Toggles a format object to a Rich Text value at the current selection.\n *\n * @param {RichTextValue}  value  Value to modify.\n * @param {RichTextFormat} format Format to apply or remove.\n *\n * @return {RichTextValue} A new value with the format applied or removed.\n */\nexport function toggleFormat( value, format ) {\n\tif ( getActiveFormat( value, format.type ) ) {\n\t\t// For screen readers, will announce if formatting control is disabled.\n\t\tif ( format.title ) {\n\t\t\t// translators: %s: title of the formatting control\n\t\t\tspeak( sprintf( __( '%s removed.' ), format.title ), 'assertive' );\n\t\t}\n\t\treturn removeFormat( value, format.type );\n\t}\n\t// For screen readers, will announce if formatting control is enabled.\n\tif ( format.title ) {\n\t\t// translators: %s: title of the formatting control\n\t\tspeak( sprintf( __( '%s applied.' ), format.title ), 'assertive' );\n\t}\n\treturn applyFormat( value, format );\n}\n","/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\n\n/** @typedef {import('./register-format-type').RichTextFormatType} RichTextFormatType */\n\n/**\n * Unregisters a format.\n *\n * @param {string} name Format name.\n *\n * @return {RichTextFormatType|undefined} The previous format value, if it has\n *                                        been successfully unregistered;\n *                                        otherwise `undefined`.\n */\nexport function unregisterFormatType( name ) {\n\tconst oldFormat = select( richTextStore ).getFormatType( name );\n\n\tif ( ! oldFormat ) {\n\t\twindow.console.error( `Format ${ name } is not registered.` );\n\t\treturn;\n\t}\n\n\tdispatch( richTextStore ).removeFormatTypes( name );\n\n\treturn oldFormat;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getActiveFormat } from '../get-active-format';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n/** @typedef {import('../register-format-type').RichTextFormatType} RichTextFormatType */\n/** @typedef {import('../create').RichTextValue} RichTextValue */\n\n/**\n * This hook, to be used in a format type's Edit component, returns the active\n * element that is formatted, or the selection range if no format is active.\n * The returned value is meant to be used for positioning UI, e.g. by passing it\n * to the `Popover` component.\n *\n * @param {Object}                 $1          Named parameters.\n * @param {RefObject<HTMLElement>} $1.ref      React ref of the element\n *                                             containing  the editable content.\n * @param {RichTextValue}          $1.value    Value to check for selection.\n * @param {RichTextFormatType}     $1.settings The format type's settings.\n *\n * @return {Element|Range} The active element or selection range.\n */\nexport function useAnchorRef( { ref, value, settings = {} } ) {\n\tconst { tagName, className, name } = settings;\n\tconst activeFormat = name ? getActiveFormat( value, name ) : undefined;\n\n\treturn useMemo( () => {\n\t\tif ( ! ref.current ) return;\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = ref.current;\n\t\tconst selection = defaultView.getSelection();\n\n\t\tif ( ! selection.rangeCount ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst range = selection.getRangeAt( 0 );\n\n\t\tif ( ! activeFormat ) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet element = range.startContainer;\n\n\t\t// If the caret is right before the element, select the next element.\n\t\telement = element.nextElementSibling || element;\n\n\t\twhile ( element.nodeType !== element.ELEMENT_NODE ) {\n\t\t\telement = element.parentNode;\n\t\t}\n\n\t\treturn element.closest(\n\t\t\ttagName + ( className ? '.' + className : '' )\n\t\t);\n\t}, [ activeFormat, value.start, value.end, tagName, className ] );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"compose\"];","/**\n * WordPress dependencies\n */\nimport { useEffect, useRef } from '@wordpress/element';\n\n/*\n * Calculates and renders the format boundary style when the active formats\n * change.\n */\nexport function useBoundaryStyle( { record } ) {\n\tconst ref = useRef();\n\tconst { activeFormats = [] } = record.current;\n\tuseEffect( () => {\n\t\t// There's no need to recalculate the boundary styles if no formats are\n\t\t// active, because no boundary styles will be visible.\n\t\tif ( ! activeFormats || ! activeFormats.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundarySelector = '*[data-rich-text-format-boundary]';\n\t\tconst element = ref.current.querySelector( boundarySelector );\n\n\t\tif ( ! element ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { ownerDocument } = element;\n\t\tconst { defaultView } = ownerDocument;\n\t\tconst computedStyle = defaultView.getComputedStyle( element );\n\t\tconst newColor = computedStyle.color\n\t\t\t.replace( ')', ', 0.2)' )\n\t\t\t.replace( 'rgb', 'rgba' );\n\t\tconst selector = `.rich-text:focus ${ boundarySelector }`;\n\t\tconst rule = `background-color: ${ newColor }`;\n\t\tconst style = `${ selector } {${ rule }}`;\n\t\tconst globalStyleId = 'rich-text-boundary-style';\n\n\t\tlet globalStyle = ownerDocument.getElementById( globalStyleId );\n\n\t\tif ( ! globalStyle ) {\n\t\t\tglobalStyle = ownerDocument.createElement( 'style' );\n\t\t\tglobalStyle.id = globalStyleId;\n\t\t\townerDocument.head.appendChild( globalStyle );\n\t\t}\n\n\t\tif ( globalStyle.innerHTML !== style ) {\n\t\t\tglobalStyle.innerHTML = style;\n\t\t}\n\t}, [ activeFormats ] );\n\treturn ref;\n}\n","/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { toHTMLString } from '../to-html-string';\nimport { isCollapsed } from '../is-collapsed';\nimport { slice } from '../slice';\nimport { getTextContent } from '../get-text-content';\n\nexport function useCopyHandler( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onCopy( event ) {\n\t\t\tconst { record, multilineTag, preserveWhiteSpace } =\n\t\t\t\tpropsRef.current;\n\t\t\tif (\n\t\t\t\tisCollapsed( record.current ) ||\n\t\t\t\t! element.contains( element.ownerDocument.activeElement )\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedRecord = slice( record.current );\n\t\t\tconst plainText = getTextContent( selectedRecord );\n\t\t\tconst html = toHTMLString( {\n\t\t\t\tvalue: selectedRecord,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\t\t\tevent.clipboardData.setData( 'text/plain', plainText );\n\t\t\tevent.clipboardData.setData( 'text/html', html );\n\t\t\tevent.clipboardData.setData( 'rich-text', 'true' );\n\t\t\tevent.clipboardData.setData(\n\t\t\t\t'rich-text-multi-line-tag',\n\t\t\t\tmultilineTag || ''\n\t\t\t);\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\telement.addEventListener( 'copy', onCopy );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'copy', onCopy );\n\t\t};\n\t}, [] );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"keycodes\"];","/**\n * WordPress dependencies\n */\nimport { useRef, useReducer } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { LEFT, RIGHT } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport { isCollapsed } from '../is-collapsed';\n\nconst EMPTY_ACTIVE_FORMATS = [];\n\nexport function useFormatBoundaries( props ) {\n\tconst [ , forceRender ] = useReducer( () => ( {} ) );\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onKeyDown( event ) {\n\t\t\tconst { keyCode, shiftKey, altKey, metaKey, ctrlKey } = event;\n\n\t\t\tif (\n\t\t\t\t// Only override left and right keys without modifiers pressed.\n\t\t\t\tshiftKey ||\n\t\t\t\taltKey ||\n\t\t\t\tmetaKey ||\n\t\t\t\tctrlKey ||\n\t\t\t\t( keyCode !== LEFT && keyCode !== RIGHT )\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { record, applyRecord } = propsRef.current;\n\t\t\tconst {\n\t\t\t\ttext,\n\t\t\t\tformats,\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tactiveFormats: currentActiveFormats = [],\n\t\t\t} = record.current;\n\t\t\tconst collapsed = isCollapsed( record.current );\n\t\t\tconst { ownerDocument } = element;\n\t\t\tconst { defaultView } = ownerDocument;\n\t\t\t// To do: ideally, we should look at visual position instead.\n\t\t\tconst { direction } = defaultView.getComputedStyle( element );\n\t\t\tconst reverseKey = direction === 'rtl' ? RIGHT : LEFT;\n\t\t\tconst isReverse = event.keyCode === reverseKey;\n\n\t\t\t// If the selection is collapsed and at the very start, do nothing if\n\t\t\t// navigating backward.\n\t\t\t// If the selection is collapsed and at the very end, do nothing if\n\t\t\t// navigating forward.\n\t\t\tif ( collapsed && currentActiveFormats.length === 0 ) {\n\t\t\t\tif ( start === 0 && isReverse ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( end === text.length && ! isReverse ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the selection is not collapsed, let the browser handle collapsing\n\t\t\t// the selection for now. Later we could expand this logic to set\n\t\t\t// boundary positions if needed.\n\t\t\tif ( ! collapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst formatsBefore = formats[ start - 1 ] || EMPTY_ACTIVE_FORMATS;\n\t\t\tconst formatsAfter = formats[ start ] || EMPTY_ACTIVE_FORMATS;\n\t\t\tconst destination = isReverse ? formatsBefore : formatsAfter;\n\t\t\tconst isIncreasing = currentActiveFormats.every(\n\t\t\t\t( format, index ) => format === destination[ index ]\n\t\t\t);\n\n\t\t\tlet newActiveFormatsLength = currentActiveFormats.length;\n\n\t\t\tif ( ! isIncreasing ) {\n\t\t\t\tnewActiveFormatsLength--;\n\t\t\t} else if ( newActiveFormatsLength < destination.length ) {\n\t\t\t\tnewActiveFormatsLength++;\n\t\t\t}\n\n\t\t\tif ( newActiveFormatsLength === currentActiveFormats.length ) {\n\t\t\t\trecord.current._newActiveFormats = destination;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconst origin = isReverse ? formatsAfter : formatsBefore;\n\t\t\tconst source = isIncreasing ? destination : origin;\n\t\t\tconst newActiveFormats = source.slice( 0, newActiveFormatsLength );\n\t\t\tconst newValue = {\n\t\t\t\t...record.current,\n\t\t\t\tactiveFormats: newActiveFormats,\n\t\t\t};\n\t\t\trecord.current = newValue;\n\t\t\tapplyRecord( newValue );\n\t\t\tforceRender();\n\t\t}\n\n\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t};\n\t}, [] );\n}\n","/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getActiveFormats } from '../get-active-formats';\nimport { updateFormats } from '../update-formats';\n\n/**\n * All inserting input types that would insert HTML into the DOM.\n *\n * @see https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes\n *\n * @type {Set}\n */\nconst INSERTION_INPUT_TYPES_TO_IGNORE = new Set( [\n\t'insertParagraph',\n\t'insertOrderedList',\n\t'insertUnorderedList',\n\t'insertHorizontalRule',\n\t'insertLink',\n] );\n\nconst EMPTY_ACTIVE_FORMATS = [];\n\nconst PLACEHOLDER_ATTR_NAME = 'data-rich-text-placeholder';\n\n/**\n * If the selection is set on the placeholder element, collapse the selection to\n * the start (before the placeholder).\n *\n * @param {Window} defaultView\n */\nfunction fixPlaceholderSelection( defaultView ) {\n\tconst selection = defaultView.getSelection();\n\tconst { anchorNode, anchorOffset } = selection;\n\n\tif ( anchorNode.nodeType !== anchorNode.ELEMENT_NODE ) {\n\t\treturn;\n\t}\n\n\tconst targetNode = anchorNode.childNodes[ anchorOffset ];\n\n\tif (\n\t\t! targetNode ||\n\t\ttargetNode.nodeType !== targetNode.ELEMENT_NODE ||\n\t\t! targetNode.hasAttribute( PLACEHOLDER_ATTR_NAME )\n\t) {\n\t\treturn;\n\t}\n\n\tselection.collapseToStart();\n}\n\nexport function useInputAndSelection( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tconst { ownerDocument } = element;\n\t\tconst { defaultView } = ownerDocument;\n\n\t\tlet isComposing = false;\n\t\tlet rafId;\n\n\t\tfunction onInput( event ) {\n\t\t\t// Do not trigger a change if characters are being composed.\n\t\t\t// Browsers  will usually emit a final `input` event when the\n\t\t\t// characters are composed.\n\t\t\t// As of December 2019, Safari doesn't support\n\t\t\t// nativeEvent.isComposing.\n\t\t\tif ( isComposing ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet inputType;\n\n\t\t\tif ( event ) {\n\t\t\t\tinputType = event.inputType;\n\t\t\t}\n\n\t\t\tconst { record, applyRecord, createRecord, handleChange } =\n\t\t\t\tpropsRef.current;\n\n\t\t\t// The browser formatted something or tried to insert HTML.\n\t\t\t// Overwrite it. It will be handled later by the format library if\n\t\t\t// needed.\n\t\t\tif (\n\t\t\t\tinputType &&\n\t\t\t\t( inputType.indexOf( 'format' ) === 0 ||\n\t\t\t\t\tINSERTION_INPUT_TYPES_TO_IGNORE.has( inputType ) )\n\t\t\t) {\n\t\t\t\tapplyRecord( record.current );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentValue = createRecord();\n\t\t\tconst { start, activeFormats: oldActiveFormats = [] } =\n\t\t\t\trecord.current;\n\n\t\t\t// Update the formats between the last and new caret position.\n\t\t\tconst change = updateFormats( {\n\t\t\t\tvalue: currentValue,\n\t\t\t\tstart,\n\t\t\t\tend: currentValue.start,\n\t\t\t\tformats: oldActiveFormats,\n\t\t\t} );\n\n\t\t\thandleChange( change );\n\t\t}\n\n\t\t/**\n\t\t * Syncs the selection to local state. A callback for the `selectionchange`\n\t\t * native events, `keyup`, `mouseup` and `touchend` synthetic events, and\n\t\t * animation frames after the `focus` event.\n\t\t *\n\t\t * @param {Event|DOMHighResTimeStamp} event\n\t\t */\n\t\tfunction handleSelectionChange( event ) {\n\t\t\tconst {\n\t\t\t\trecord,\n\t\t\t\tapplyRecord,\n\t\t\t\tcreateRecord,\n\t\t\t\tisSelected,\n\t\t\t\tonSelectionChange,\n\t\t\t} = propsRef.current;\n\n\t\t\t// Check if the implementor disabled editing. `contentEditable`\n\t\t\t// does disable input, but not text selection, so we must ignore\n\t\t\t// selection changes.\n\t\t\tif ( element.contentEditable !== 'true' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the selection changes where the active element is a parent of\n\t\t\t// the rich text instance (writing flow), call `onSelectionChange`\n\t\t\t// for the rich text instance that contains the start or end of the\n\t\t\t// selection.\n\t\t\tif ( ownerDocument.activeElement !== element ) {\n\t\t\t\t// Only process if the active elment is contentEditable, either\n\t\t\t\t// this rich text instance or the writing flow parent. Fixes a\n\t\t\t\t// bug in Firefox where it strangely selects the closest\n\t\t\t\t// contentEditable element, even though the click was outside\n\t\t\t\t// any contentEditable element.\n\t\t\t\tif ( ownerDocument.activeElement.contentEditable !== 'true' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( ! ownerDocument.activeElement.contains( element ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selection = defaultView.getSelection();\n\t\t\t\tconst { anchorNode, focusNode } = selection;\n\n\t\t\t\tif (\n\t\t\t\t\telement.contains( anchorNode ) &&\n\t\t\t\t\telement !== anchorNode &&\n\t\t\t\t\telement.contains( focusNode ) &&\n\t\t\t\t\telement !== focusNode\n\t\t\t\t) {\n\t\t\t\t\tconst { start, end } = createRecord();\n\t\t\t\t\trecord.current.activeFormats = EMPTY_ACTIVE_FORMATS;\n\t\t\t\t\tonSelectionChange( start, end );\n\t\t\t\t} else if (\n\t\t\t\t\telement.contains( anchorNode ) &&\n\t\t\t\t\telement !== anchorNode\n\t\t\t\t) {\n\t\t\t\t\tconst { start, end: offset = start } = createRecord();\n\t\t\t\t\trecord.current.activeFormats = EMPTY_ACTIVE_FORMATS;\n\t\t\t\t\tonSelectionChange( offset );\n\t\t\t\t} else if (\n\t\t\t\t\telement.contains( focusNode ) &&\n\t\t\t\t\telement !== focusNode\n\t\t\t\t) {\n\t\t\t\t\tconst { start, end: offset = start } = createRecord();\n\t\t\t\t\trecord.current.activeFormats = EMPTY_ACTIVE_FORMATS;\n\t\t\t\t\tonSelectionChange( undefined, offset );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( event.type !== 'selectionchange' && ! isSelected ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// In case of a keyboard event, ignore selection changes during\n\t\t\t// composition.\n\t\t\tif ( isComposing ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { start, end, text } = createRecord();\n\t\t\tconst oldRecord = record.current;\n\n\t\t\t// Fallback mechanism for IE11, which doesn't support the input event.\n\t\t\t// Any input results in a selection change.\n\t\t\tif ( text !== oldRecord.text ) {\n\t\t\t\tonInput();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( start === oldRecord.start && end === oldRecord.end ) {\n\t\t\t\t// Sometimes the browser may set the selection on the placeholder\n\t\t\t\t// element, in which case the caret is not visible. We need to set\n\t\t\t\t// the caret before the placeholder if that's the case.\n\t\t\t\tif ( oldRecord.text.length === 0 && start === 0 ) {\n\t\t\t\t\tfixPlaceholderSelection( defaultView );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newValue = {\n\t\t\t\t...oldRecord,\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\t// _newActiveFormats may be set on arrow key navigation to control\n\t\t\t\t// the right boundary position. If undefined, getActiveFormats will\n\t\t\t\t// give the active formats according to the browser.\n\t\t\t\tactiveFormats: oldRecord._newActiveFormats,\n\t\t\t\t_newActiveFormats: undefined,\n\t\t\t};\n\n\t\t\tconst newActiveFormats = getActiveFormats(\n\t\t\t\tnewValue,\n\t\t\t\tEMPTY_ACTIVE_FORMATS\n\t\t\t);\n\n\t\t\t// Update the value with the new active formats.\n\t\t\tnewValue.activeFormats = newActiveFormats;\n\n\t\t\t// It is important that the internal value is updated first,\n\t\t\t// otherwise the value will be wrong on render!\n\t\t\trecord.current = newValue;\n\t\t\tapplyRecord( newValue, { domOnly: true } );\n\t\t\tonSelectionChange( start, end );\n\t\t}\n\n\t\tfunction onCompositionStart() {\n\t\t\tisComposing = true;\n\t\t\t// Do not update the selection when characters are being composed as\n\t\t\t// this rerenders the component and might destroy internal browser\n\t\t\t// editing state.\n\t\t\townerDocument.removeEventListener(\n\t\t\t\t'selectionchange',\n\t\t\t\thandleSelectionChange\n\t\t\t);\n\t\t\t// Remove the placeholder. Since the rich text value doesn't update\n\t\t\t// during composition, the placeholder doesn't get removed. There's\n\t\t\t// no need to re-add it, when the value is updated on compositionend\n\t\t\t// it will be re-added when the value is empty.\n\t\t\telement.querySelector( `[${ PLACEHOLDER_ATTR_NAME }]` )?.remove();\n\t\t}\n\n\t\tfunction onCompositionEnd() {\n\t\t\tisComposing = false;\n\t\t\t// Ensure the value is up-to-date for browsers that don't emit a final\n\t\t\t// input event after composition.\n\t\t\tonInput( { inputType: 'insertText' } );\n\t\t\t// Tracking selection changes can be resumed.\n\t\t\townerDocument.addEventListener(\n\t\t\t\t'selectionchange',\n\t\t\t\thandleSelectionChange\n\t\t\t);\n\t\t}\n\n\t\tfunction onFocus() {\n\t\t\tconst { record, isSelected, onSelectionChange, applyRecord } =\n\t\t\t\tpropsRef.current;\n\n\t\t\t// When the whole editor is editable, let writing flow handle\n\t\t\t// selection.\n\t\t\tif ( element.parentElement.closest( '[contenteditable=\"true\"]' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! isSelected ) {\n\t\t\t\t// We know for certain that on focus, the old selection is invalid.\n\t\t\t\t// It will be recalculated on the next mouseup, keyup, or touchend\n\t\t\t\t// event.\n\t\t\t\tconst index = undefined;\n\n\t\t\t\trecord.current = {\n\t\t\t\t\t...record.current,\n\t\t\t\t\tstart: index,\n\t\t\t\t\tend: index,\n\t\t\t\t\tactiveFormats: EMPTY_ACTIVE_FORMATS,\n\t\t\t\t};\n\t\t\t\tonSelectionChange( index, index );\n\t\t\t} else {\n\t\t\t\tapplyRecord( record.current );\n\t\t\t\tonSelectionChange( record.current.start, record.current.end );\n\t\t\t}\n\n\t\t\t// Update selection as soon as possible, which is at the next animation\n\t\t\t// frame. The event listener for selection changes may be added too late\n\t\t\t// at this point, but this focus event is still too early to calculate\n\t\t\t// the selection.\n\t\t\trafId = defaultView.requestAnimationFrame( handleSelectionChange );\n\t\t}\n\n\t\telement.addEventListener( 'input', onInput );\n\t\telement.addEventListener( 'compositionstart', onCompositionStart );\n\t\telement.addEventListener( 'compositionend', onCompositionEnd );\n\t\telement.addEventListener( 'focus', onFocus );\n\t\t// Selection updates must be done at these events as they\n\t\t// happen before the `selectionchange` event. In some cases,\n\t\t// the `selectionchange` event may not even fire, for\n\t\t// example when the window receives focus again on click.\n\t\telement.addEventListener( 'keyup', handleSelectionChange );\n\t\telement.addEventListener( 'mouseup', handleSelectionChange );\n\t\telement.addEventListener( 'touchend', handleSelectionChange );\n\t\townerDocument.addEventListener(\n\t\t\t'selectionchange',\n\t\t\thandleSelectionChange\n\t\t);\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'input', onInput );\n\t\t\telement.removeEventListener(\n\t\t\t\t'compositionstart',\n\t\t\t\tonCompositionStart\n\t\t\t);\n\t\t\telement.removeEventListener( 'compositionend', onCompositionEnd );\n\t\t\telement.removeEventListener( 'focus', onFocus );\n\t\t\telement.removeEventListener( 'keyup', handleSelectionChange );\n\t\t\telement.removeEventListener( 'mouseup', handleSelectionChange );\n\t\t\telement.removeEventListener( 'touchend', handleSelectionChange );\n\t\t\townerDocument.removeEventListener(\n\t\t\t\t'selectionchange',\n\t\t\t\thandleSelectionChange\n\t\t\t);\n\t\t\tdefaultView.cancelAnimationFrame( rafId );\n\t\t};\n\t}, [] );\n}\n","/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Efficiently updates all the formats from `start` (including) until `end`\n * (excluding) with the active formats. Mutates `value`.\n *\n * @param {Object}        $1         Named paramentes.\n * @param {RichTextValue} $1.value   Value te update.\n * @param {number}        $1.start   Index to update from.\n * @param {number}        $1.end     Index to update until.\n * @param {Array}         $1.formats Replacement formats.\n *\n * @return {RichTextValue} Mutated value.\n */\nexport function updateFormats( { value, start, end, formats } ) {\n\t// Start and end may be switched in case of delete.\n\tconst min = Math.min( start, end );\n\tconst max = Math.max( start, end );\n\tconst formatsBefore = value.formats[ min - 1 ] || [];\n\tconst formatsAfter = value.formats[ max ] || [];\n\n\t// First, fix the references. If any format right before or after are\n\t// equal, the replacement format should use the same reference.\n\tvalue.activeFormats = formats.map( ( format, index ) => {\n\t\tif ( formatsBefore[ index ] ) {\n\t\t\tif ( isFormatEqual( format, formatsBefore[ index ] ) ) {\n\t\t\t\treturn formatsBefore[ index ];\n\t\t\t}\n\t\t} else if ( formatsAfter[ index ] ) {\n\t\t\tif ( isFormatEqual( format, formatsAfter[ index ] ) ) {\n\t\t\t\treturn formatsAfter[ index ];\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t} );\n\n\twhile ( --end >= start ) {\n\t\tif ( value.activeFormats.length > 0 ) {\n\t\t\tvalue.formats[ end ] = value.activeFormats;\n\t\t} else {\n\t\t\tdelete value.formats[ end ];\n\t\t}\n\t}\n\n\treturn value;\n}\n","/**\n * Internal dependencies\n */\n\nimport { LINE_SEPARATOR } from './special-characters';\nimport { isCollapsed } from './is-collapsed';\nimport { remove } from './remove';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Removes a line separator character, if existing, from a Rich Text value at\n * the current indices. If no line separator exists on the indices it will\n * return undefined.\n *\n * @param {RichTextValue} value    Value to modify.\n * @param {boolean}       backward Indicates if are removing from the start\n *                                 index or the end index.\n *\n * @return {RichTextValue|undefined} A new value with the line separator\n *                                   removed. Or undefined if no line separator\n *                                   is found on the position.\n */\nexport function removeLineSeparator( value, backward = true ) {\n\tconst { replacements, text, start, end } = value;\n\tconst collapsed = isCollapsed( value );\n\tlet index = start - 1;\n\tlet removeStart = collapsed ? start - 1 : start;\n\tlet removeEnd = end;\n\tif ( ! backward ) {\n\t\tindex = end;\n\t\tremoveStart = start;\n\t\tremoveEnd = collapsed ? end + 1 : end;\n\t}\n\n\tif ( text[ index ] !== LINE_SEPARATOR ) {\n\t\treturn;\n\t}\n\n\tlet newValue;\n\t// If the line separator that is about te be removed\n\t// contains wrappers, remove the wrappers first.\n\tif ( collapsed && replacements[ index ] && replacements[ index ].length ) {\n\t\tconst newReplacements = replacements.slice();\n\n\t\tnewReplacements[ index ] = replacements[ index ].slice( 0, -1 );\n\t\tnewValue = {\n\t\t\t...value,\n\t\t\treplacements: newReplacements,\n\t\t};\n\t} else {\n\t\tnewValue = remove( value, removeStart, removeEnd );\n\t}\n\treturn newValue;\n}\n","/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { BACKSPACE, DELETE } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport { remove } from '../remove';\nimport { removeLineSeparator } from '../remove-line-separator';\nimport { isEmptyLine } from '../is-empty';\n\nexport function useDelete( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onKeyDown( event ) {\n\t\t\tconst { keyCode } = event;\n\t\t\tconst { createRecord, handleChange, multilineTag } =\n\t\t\t\tpropsRef.current;\n\n\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( keyCode !== DELETE && keyCode !== BACKSPACE ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentValue = createRecord();\n\t\t\tconst { start, end, text } = currentValue;\n\t\t\tconst isReverse = keyCode === BACKSPACE;\n\n\t\t\t// Always handle full content deletion ourselves.\n\t\t\tif ( start === 0 && end !== 0 && end === text.length ) {\n\t\t\t\thandleChange( remove( currentValue ) );\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( multilineTag ) {\n\t\t\t\tlet newValue;\n\n\t\t\t\t// Check to see if we should remove the first item if empty.\n\t\t\t\tif (\n\t\t\t\t\tisReverse &&\n\t\t\t\t\tcurrentValue.start === 0 &&\n\t\t\t\t\tcurrentValue.end === 0 &&\n\t\t\t\t\tisEmptyLine( currentValue )\n\t\t\t\t) {\n\t\t\t\t\tnewValue = removeLineSeparator( currentValue, ! isReverse );\n\t\t\t\t} else {\n\t\t\t\t\tnewValue = removeLineSeparator( currentValue, isReverse );\n\t\t\t\t}\n\n\t\t\t\tif ( newValue ) {\n\t\t\t\t\thandleChange( newValue );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t};\n\t}, [] );\n}\n","/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect, useReducer } from '@wordpress/element';\nimport { useMergeRefs, useRefEffect } from '@wordpress/compose';\nimport { useRegistry } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { create } from '../create';\nimport { apply } from '../to-dom';\nimport { toHTMLString } from '../to-html-string';\nimport { useDefaultStyle } from './use-default-style';\nimport { useBoundaryStyle } from './use-boundary-style';\nimport { useCopyHandler } from './use-copy-handler';\nimport { useFormatBoundaries } from './use-format-boundaries';\nimport { useSelectObject } from './use-select-object';\nimport { useInputAndSelection } from './use-input-and-selection';\nimport { useDelete } from './use-delete';\n\nexport function useRichText( {\n\tvalue = '',\n\tselectionStart,\n\tselectionEnd,\n\tplaceholder,\n\tpreserveWhiteSpace,\n\tonSelectionChange,\n\tonChange,\n\t__unstableMultilineTag: multilineTag,\n\t__unstableDisableFormats: disableFormats,\n\t__unstableIsSelected: isSelected,\n\t__unstableDependencies = [],\n\t__unstableAfterParse,\n\t__unstableBeforeSerialize,\n\t__unstableAddInvisibleFormats,\n} ) {\n\tconst registry = useRegistry();\n\tconst [ , forceRender ] = useReducer( () => ( {} ) );\n\tconst ref = useRef();\n\n\tfunction createRecord() {\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = ref.current;\n\t\tconst selection = defaultView.getSelection();\n\t\tconst range =\n\t\t\tselection.rangeCount > 0 ? selection.getRangeAt( 0 ) : null;\n\n\t\treturn create( {\n\t\t\telement: ref.current,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\t__unstableIsEditableTree: true,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\tfunction applyRecord( newRecord, { domOnly } = {} ) {\n\t\tapply( {\n\t\t\tvalue: newRecord,\n\t\t\tcurrent: ref.current,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\tprepareEditableTree: __unstableAddInvisibleFormats,\n\t\t\t__unstableDomOnly: domOnly,\n\t\t\tplaceholder,\n\t\t} );\n\t}\n\n\t// Internal values are updated synchronously, unlike props and state.\n\tconst _value = useRef( value );\n\tconst record = useRef();\n\n\tfunction setRecordFromProps() {\n\t\t_value.current = value;\n\t\trecord.current = create( {\n\t\t\thtml: value,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t\tif ( disableFormats ) {\n\t\t\trecord.current.formats = Array( value.length );\n\t\t\trecord.current.replacements = Array( value.length );\n\t\t}\n\t\tif ( __unstableAfterParse ) {\n\t\t\trecord.current.formats = __unstableAfterParse( record.current );\n\t\t}\n\t\trecord.current.start = selectionStart;\n\t\trecord.current.end = selectionEnd;\n\t}\n\n\tconst hadSelectionUpdate = useRef( false );\n\n\tif ( ! record.current ) {\n\t\tsetRecordFromProps();\n\t\t// Sometimes formats are added programmatically and we need to make\n\t\t// sure it's persisted to the block store / markup. If these formats\n\t\t// are not applied, they could cause inconsistencies between the data\n\t\t// in the visual editor and the frontend. Right now, it's only relevant\n\t\t// to the `core/text-color` format, which is applied at runtime in\n\t\t// certain circunstances. See the `__unstableFilterAttributeValue`\n\t\t// function in `packages/format-library/src/text-color/index.js`.\n\t\t// @todo find a less-hacky way of solving this.\n\n\t\tconst hasRelevantInitFormat =\n\t\t\trecord.current?.formats[ 0 ]?.[ 0 ]?.type === 'core/text-color';\n\n\t\tif ( hasRelevantInitFormat ) {\n\t\t\thandleChangesUponInit( record.current );\n\t\t}\n\t} else if (\n\t\tselectionStart !== record.current.start ||\n\t\tselectionEnd !== record.current.end\n\t) {\n\t\thadSelectionUpdate.current = isSelected;\n\t\trecord.current = {\n\t\t\t...record.current,\n\t\t\tstart: selectionStart,\n\t\t\tend: selectionEnd,\n\t\t};\n\t}\n\n\t/**\n\t * Sync the value to global state. The node tree and selection will also be\n\t * updated if differences are found.\n\t *\n\t * @param {Object} newRecord The record to sync and apply.\n\t */\n\tfunction handleChange( newRecord ) {\n\t\trecord.current = newRecord;\n\t\tapplyRecord( newRecord );\n\n\t\tif ( disableFormats ) {\n\t\t\t_value.current = newRecord.text;\n\t\t} else {\n\t\t\t_value.current = toHTMLString( {\n\t\t\t\tvalue: __unstableBeforeSerialize\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...newRecord,\n\t\t\t\t\t\t\tformats: __unstableBeforeSerialize( newRecord ),\n\t\t\t\t\t  }\n\t\t\t\t\t: newRecord,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\t\t}\n\n\t\tconst { start, end, formats, text } = newRecord;\n\n\t\t// Selection must be updated first, so it is recorded in history when\n\t\t// the content change happens.\n\t\t// We batch both calls to only attempt to rerender once.\n\t\tregistry.batch( () => {\n\t\t\tonSelectionChange( start, end );\n\t\t\tonChange( _value.current, {\n\t\t\t\t__unstableFormats: formats,\n\t\t\t\t__unstableText: text,\n\t\t\t} );\n\t\t} );\n\t\tforceRender();\n\t}\n\n\tfunction handleChangesUponInit( newRecord ) {\n\t\trecord.current = newRecord;\n\n\t\t_value.current = toHTMLString( {\n\t\t\tvalue: __unstableBeforeSerialize\n\t\t\t\t? {\n\t\t\t\t\t\t...newRecord,\n\t\t\t\t\t\tformats: __unstableBeforeSerialize( newRecord ),\n\t\t\t\t  }\n\t\t\t\t: newRecord,\n\t\t\tmultilineTag,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\tconst { formats, text } = newRecord;\n\n\t\tregistry.batch( () => {\n\t\t\tonChange( _value.current, {\n\t\t\t\t__unstableFormats: formats,\n\t\t\t\t__unstableText: text,\n\t\t\t} );\n\t\t} );\n\t\tforceRender();\n\t}\n\n\tfunction applyFromProps() {\n\t\tsetRecordFromProps();\n\t\tapplyRecord( record.current );\n\t}\n\n\tconst didMount = useRef( false );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( didMount.current && value !== _value.current ) {\n\t\t\tapplyFromProps();\n\t\t\tforceRender();\n\t\t}\n\t}, [ value ] );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( ! hadSelectionUpdate.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ref.current.ownerDocument.activeElement !== ref.current ) {\n\t\t\tref.current.focus();\n\t\t}\n\n\t\tapplyFromProps();\n\t\thadSelectionUpdate.current = false;\n\t}, [ hadSelectionUpdate.current ] );\n\n\tconst mergedRefs = useMergeRefs( [\n\t\tref,\n\t\tuseDefaultStyle(),\n\t\tuseBoundaryStyle( { record } ),\n\t\tuseCopyHandler( { record, multilineTag, preserveWhiteSpace } ),\n\t\tuseSelectObject(),\n\t\tuseFormatBoundaries( { record, applyRecord } ),\n\t\tuseDelete( {\n\t\t\tcreateRecord,\n\t\t\thandleChange,\n\t\t\tmultilineTag,\n\t\t} ),\n\t\tuseInputAndSelection( {\n\t\t\trecord,\n\t\t\tapplyRecord,\n\t\t\tcreateRecord,\n\t\t\thandleChange,\n\t\t\tisSelected,\n\t\t\tonSelectionChange,\n\t\t} ),\n\t\tuseRefEffect( () => {\n\t\t\tapplyFromProps();\n\t\t\tdidMount.current = true;\n\t\t}, [ placeholder, ...__unstableDependencies ] ),\n\t] );\n\n\treturn {\n\t\tvalue: record.current,\n\t\tonChange: handleChange,\n\t\tref: mergedRefs,\n\t};\n}\n\nexport default function __experimentalRichText() {}\n","/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\n\n/**\n * In HTML, leading and trailing spaces are not visible, and multiple spaces\n * elsewhere are visually reduced to one space. This rule prevents spaces from\n * collapsing so all space is visible in the editor and can be removed. It also\n * prevents some browsers from inserting non-breaking spaces at the end of a\n * line to prevent the space from visually disappearing. Sometimes these non\n * breaking spaces can linger in the editor causing unwanted non breaking spaces\n * in between words. If also prevent Firefox from inserting a trailing `br` node\n * to visualise any trailing space, causing the element to be saved.\n *\n * > Authors are encouraged to set the 'white-space' property on editing hosts\n * > and on markup that was originally created through these editing mechanisms\n * > to the value 'pre-wrap'. Default HTML whitespace handling is not well\n * > suited to WYSIWYG editing, and line wrapping will not work correctly in\n * > some corner cases if 'white-space' is left at its default value.\n *\n * https://html.spec.whatwg.org/multipage/interaction.html#best-practices-for-in-page-editors\n *\n * @type {string}\n */\nconst whiteSpace = 'pre-wrap';\n\n/**\n * A minimum width of 1px will prevent the rich text container from collapsing\n * to 0 width and hiding the caret. This is useful for inline containers.\n */\nconst minWidth = '1px';\n\nexport function useDefaultStyle() {\n\treturn useCallback( ( element ) => {\n\t\tif ( ! element ) return;\n\t\telement.style.whiteSpace = whiteSpace;\n\t\telement.style.minWidth = minWidth;\n\t}, [] );\n}\n","/**\n * WordPress dependencies\n */\nimport { useRefEffect } from '@wordpress/compose';\n\nexport function useSelectObject() {\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onClick( event ) {\n\t\t\tconst { target } = event;\n\n\t\t\t// If the child element has no text content, it must be an object.\n\t\t\tif ( target === element || target.textContent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { ownerDocument } = target;\n\t\t\tconst { defaultView } = ownerDocument;\n\t\t\tconst range = ownerDocument.createRange();\n\t\t\tconst selection = defaultView.getSelection();\n\n\t\t\trange.selectNode( target );\n\t\t\tselection.removeAllRanges();\n\t\t\tselection.addRange( range );\n\t\t}\n\n\t\telement.addEventListener( 'click', onClick );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'click', onClick );\n\t\t};\n\t}, [] );\n}\n","/**\n * Internal dependencies\n */\nimport { getActiveFormat } from '../get-active-format';\nimport { getActiveObject } from '../get-active-object';\n\nexport default function FormatEdit( {\n\tformatTypes,\n\tonChange,\n\tonFocus,\n\tvalue,\n\tforwardedRef,\n} ) {\n\treturn formatTypes.map( ( settings ) => {\n\t\tconst { name, edit: Edit } = settings;\n\n\t\tif ( ! Edit ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst activeFormat = getActiveFormat( value, name );\n\t\tconst isActive = activeFormat !== undefined;\n\t\tconst activeObject = getActiveObject( value );\n\t\tconst isObjectActive =\n\t\t\tactiveObject !== undefined && activeObject.type === name;\n\n\t\treturn (\n\t\t\t<Edit\n\t\t\t\tkey={ name }\n\t\t\t\tisActive={ isActive }\n\t\t\t\tactiveAttributes={\n\t\t\t\t\tisActive ? activeFormat.attributes || {} : {}\n\t\t\t\t}\n\t\t\t\tisObjectActive={ isObjectActive }\n\t\t\t\tactiveObjectAttributes={\n\t\t\t\t\tisObjectActive ? activeObject.attributes || {} : {}\n\t\t\t\t}\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ onChange }\n\t\t\t\tonFocus={ onFocus }\n\t\t\t\tcontentRef={ forwardedRef }\n\t\t\t/>\n\t\t);\n\t} );\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","combineReducers","formatTypes","state","action","type","reduce","newFormatTypes","name","omit","names","LEAF_KEY","arrayOf","isShallowEqual","a","b","fromIndex","i","length","getFormatTypes","selector","getDependants","rootCache","normalizedGetDependants","getCache","dependants","dependant","map","cache","caches","isUniqueByDependants","has","WeakMap","set","clear","head","createCache","callSelector","node","args","len","arguments","Array","apply","lastDependants","next","prev","val","createSelector","values","getFormatType","getFormatTypeForBareElement","bareElementTagName","find","className","tagName","getFormatTypeForClassName","elementClassName","indexOf","addFormatTypes","castArray","removeFormatTypes","store","createReduxStore","reducer","selectors","actions","isFormatEqual","format1","format2","attributes1","attributes","attributes2","keys1","keys","keys2","normaliseFormats","newFormats","formats","slice","forEach","formatsAtIndex","index","formatsAtPreviousIndex","newFormatsAtIndex","format","formatIndex","previousFormat","replace","array","applyFormat","startIndex","start","endIndex","end","activeFormats","startFormat","position","filter","splice","createElement","html","implementation","body","createHTMLDocument","innerHTML","register","LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","toFormat","formatType","class","select","richTextStore","trim","__experimentalCreatePrepareEditableTree","__experimentalCreateOnChangeEditableValue","registeredAttributes","unregisteredAttributes","_attributes","__unstableFilterAttributeValue","create","element","text","range","multilineTag","multilineWrapperTags","__unstableIsEditableTree","isEditableTree","preserveWhiteSpace","replacements","document","createFromMultilineElement","createFromElement","accumulateSelection","accumulator","parentNode","startContainer","startOffset","endContainer","endOffset","currentLength","undefined","nodeType","TEXT_NODE","childNodes","filterRange","nodeValue","collapseWhiteSpace","string","removeReservedCharacters","RegExp","currentWrapperTags","hasChildNodes","nodeName","toLowerCase","ELEMENT_NODE","getAttribute","encodeURIComponent","mergePair","getAttributes","mergeFormats","from","children","hasAttributes","test","concat","getActiveFormats","EMPTY_ACTIVE_FORMATS","formatsBefore","formatsAfter","getActiveFormat","getActiveObject","pattern","getTextContent","c","isCollapsed","isEmpty","isEmptyLine","join","separator","accumlator","registerFormatType","settings","console","error","formatTypeForBareElement","formatTypeForClassName","title","keywords","dispatch","removeFormat","newFormat","filterFormats","insert","valueToInsert","remove","replacement","match","rest","offset","newReplacements","newText","fill","insertLineSeparator","beforeText","previousLineSeparatorIndex","lastIndexOf","previousLineSeparatorFormats","insertObject","formatToInsert","split","splitAtSelection","nextStart","substring","before","after","restoreOnAttributes","newAttributes","newKey","startsWith","fromFormat","object","boundaryClass","elementAttributes","isEqualUntil","toTree","createEmpty","append","getLastChild","getParent","isText","getText","appendText","onStartIndex","onEndIndex","placeholder","formatsLength","tree","multilineFormat","deepestActiveFormat","lastSeparatorFormats","lastCharacterFormats","lastCharacter","character","charAt","shouldInsertPadding","characterFormats","push","pointer","parent","newNode","decodeURIComponent","contenteditable","style","createPathToNode","rootNode","path","previousSibling","getNodeByPath","shift","child","ownerDocument","createTextNode","setAttribute","appendChild","appendData","lastChild","removeChild","toDom","prepareEditableTree","doc","startPath","endPath","selection","current","__unstableDomOnly","applyValue","defaultView","getSelection","createRange","setStart","setEnd","activeElement","rangeCount","getRangeAt","removeAllRanges","addRange","HTMLElement","focus","applySelection","future","futureChild","firstChild","currentChild","isEqualNode","data","replaceChild","currentAttributes","futureAttributes","ii","removeAttribute","toHTMLString","createChildrenHTML","createElementHTML","attributeString","isValidAttributeName","escapeAttribute","escapeEditableHTML","toggleFormat","speak","sprintf","__","unregisterFormatType","oldFormat","useAnchorRef","ref","activeFormat","useMemo","nextElementSibling","closest","useBoundaryStyle","record","useRef","useEffect","boundarySelector","querySelector","getComputedStyle","color","globalStyleId","globalStyle","getElementById","id","useCopyHandler","props","propsRef","useRefEffect","onCopy","event","contains","selectedRecord","plainText","clipboardData","setData","preventDefault","addEventListener","removeEventListener","useFormatBoundaries","forceRender","useReducer","onKeyDown","keyCode","shiftKey","altKey","metaKey","ctrlKey","LEFT","RIGHT","applyRecord","currentActiveFormats","collapsed","direction","reverseKey","isReverse","destination","isIncreasing","every","newActiveFormatsLength","_newActiveFormats","newActiveFormats","newValue","INSERTION_INPUT_TYPES_TO_IGNORE","Set","PLACEHOLDER_ATTR_NAME","useInputAndSelection","rafId","isComposing","onInput","inputType","createRecord","handleChange","currentValue","oldActiveFormats","min","Math","max","updateFormats","handleSelectionChange","isSelected","onSelectionChange","contentEditable","anchorNode","focusNode","oldRecord","anchorOffset","targetNode","hasAttribute","collapseToStart","fixPlaceholderSelection","domOnly","onCompositionStart","onCompositionEnd","onFocus","parentElement","requestAnimationFrame","cancelAnimationFrame","removeLineSeparator","backward","removeStart","removeEnd","useDelete","defaultPrevented","DELETE","BACKSPACE","useRichText","selectionStart","selectionEnd","onChange","__unstableMultilineTag","__unstableDisableFormats","disableFormats","__unstableIsSelected","__unstableDependencies","__unstableAfterParse","__unstableBeforeSerialize","__unstableAddInvisibleFormats","registry","useRegistry","newRecord","_value","setRecordFromProps","hadSelectionUpdate","batch","__unstableFormats","__unstableText","handleChangesUponInit","applyFromProps","didMount","useLayoutEffect","mergedRefs","useMergeRefs","useCallback","whiteSpace","minWidth","onClick","target","textContent","selectNode","__experimentalRichText","FormatEdit","forwardedRef","edit","Edit","isActive","activeObject","isObjectActive","activeAttributes","activeObjectAttributes","contentRef"],"sourceRoot":""}